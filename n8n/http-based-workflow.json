{
  "name": "HTTP-Based Social Media Scheduler",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes", 
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Every Minute Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/rpc/get_pending_scheduled_posts",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Authorization", 
              "value": "Bearer {{ $credentials.supabaseApi.serviceKey }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fetch-pending-posts-http",
      "name": "Fetch Pending Posts (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300],
      "credentials": {
        "supabaseApi": {
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-posts",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-has-posts",
      "name": "Has Posts to Process?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process posts for HTTP-based workflow\nconst posts = $input.first().json || [];\nconst results = [];\n\nconsole.log(`📋 Processing ${posts.length} scheduled posts via HTTP`);\n\nfor (const post of posts) {\n  const postData = {\n    queueId: post.queue_id,\n    postId: post.post_id,\n    userId: post.user_id,\n    content: post.content,\n    platforms: post.platforms || [],\n    mediaUrls: post.media_urls || [],\n    scheduledFor: post.scheduled_for,\n    oauthCredentials: post.oauth_credentials || {}\n  };\n  \n  console.log(`📝 Post ${postData.postId}: \"${postData.content.substring(0, 50)}...\"`);\n  \n  results.push(postData);\n}\n\nreturn results.map(item => ({ json: item }));"
      },
      "id": "process-posts-http",
      "name": "Process Posts (HTTP)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 180]
    },
    {
      "parameters": {
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/rpc/update_scheduled_post_status",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"queue_id_param\": \"{{ $json.queueId }}\",\n  \"new_status\": \"processing\",\n  \"execution_id_param\": \"{{ $workflow.id }}-{{ $execution.id }}\"\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "mark-processing-http",
      "name": "Mark as Processing (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 180],
      "credentials": {
        "supabaseApi": {
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Same publishing logic as before but for HTTP workflow\nconst postData = $input.first().json;\nconst platforms = postData.platforms || [];\nconst content = postData.content || '';\nconst mediaUrls = postData.mediaUrls || [];\nconst oauthCredentials = postData.oauthCredentials || {};\nconst queueId = postData.queueId;\nconst postId = postData.postId;\n\nconsole.log(`🚀 Publishing post ${postId} via HTTP workflow`);\n\nconst results = [];\nconst platformPostIds = {};\nlet successCount = 0;\nlet failureCount = 0;\n\n// Same publishing functions as before...\n// [Include all the platform publishing functions here]\n\nfor (const platform of platforms) {\n  try {\n    const credentials = oauthCredentials[platform];\n    if (!credentials?.access_token) {\n      throw new Error(`No OAuth credentials for ${platform}`);\n    }\n\n    let postResult;\n    switch (platform.toLowerCase()) {\n      case 'twitter':\n        postResult = await publishToTwitter(content, mediaUrls, credentials);\n        break;\n      case 'facebook':\n        postResult = await publishToFacebook(content, mediaUrls, credentials);\n        break;\n      // Add other platforms...\n      default:\n        throw new Error(`Unsupported platform: ${platform}`);\n    }\n\n    results.push({\n      platform,\n      success: true,\n      postId: postResult.id,\n      url: postResult.url\n    });\n    \n    platformPostIds[platform] = postResult.id;\n    successCount++;\n    \n  } catch (error) {\n    results.push({\n      platform,\n      success: false,\n      error: error.message\n    });\n    failureCount++;\n  }\n}\n\n// Publishing functions\nasync function publishToTwitter(content, mediaUrls, credentials) {\n  const response = await $http.request({\n    method: 'POST',\n    url: 'https://api.twitter.com/2/tweets',\n    headers: {\n      'Authorization': `Bearer ${credentials.access_token}`,\n      'Content-Type': 'application/json'\n    },\n    body: { text: content }\n  });\n  \n  return { \n    id: response.data.id, \n    url: `https://twitter.com/user/status/${response.data.id}` \n  };\n}\n\nasync function publishToFacebook(content, mediaUrls, credentials) {\n  const response = await $http.request({\n    method: 'POST',\n    url: 'https://graph.facebook.com/me/feed',\n    body: {\n      message: content,\n      access_token: credentials.access_token\n    }\n  });\n  \n  return { \n    id: response.id, \n    url: `https://facebook.com/${response.id}` \n  };\n}\n\nconst finalStatus = failureCount === 0 ? 'completed' : \n                   successCount === 0 ? 'failed' : 'partial';\n\nreturn [{\n  queueId,\n  postId,\n  results,\n  platformPostIds,\n  successCount,\n  failureCount,\n  status: finalStatus,\n  errorMessage: failureCount > 0 ? \n    results.filter(r => !r.success).map(r => `${r.platform}: ${r.error}`).join('; ') : null\n}];"
      },
      "id": "publish-platforms-http",
      "name": "Publish to Platforms (HTTP)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/rpc/update_scheduled_post_status",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"queue_id_param\": \"{{ $json.queueId }}\",\n  \"new_status\": \"{{ $json.status }}\",\n  \"execution_id_param\": \"{{ $workflow.id }}-{{ $execution.id }}\",\n  \"error_message_param\": {{ $json.errorMessage ? `\"${$json.errorMessage}\"` : 'null' }},\n  \"platform_post_ids_param\": {{ JSON.stringify($json.platformPostIds) }}\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "update-status-http",
      "name": "Update Final Status (HTTP)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 180],
      "credentials": {
        "supabaseApi": {
          "name": "Supabase API"
        }
      }
    }
  ],
  "connections": {
    "Every Minute Trigger": {
      "main": [
        [
          {
            "node": "Fetch Pending Posts (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Pending Posts (HTTP)": {
      "main": [
        [
          {
            "node": "Has Posts to Process?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Posts to Process?": {
      "main": [
        [
          {
            "node": "Process Posts (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Posts (HTTP)": {
      "main": [
        [
          {
            "node": "Mark as Processing (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Processing (HTTP)": {
      "main": [
        [
          {
            "node": "Publish to Platforms (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish to Platforms (HTTP)": {
      "main": [
        [
          {
            "node": "Update Final Status (HTTP)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["http", "supabase", "social-media"],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "3.0"
}
