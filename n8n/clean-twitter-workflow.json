{
  "name": "Clean Twitter Posting Workflow",
  "nodes": [
    {
      "parameters": {
        "path": "schedule-post",
        "method": "POST",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook_start",
      "name": "Schedule Post Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [140, 380]
    },
    {
      "parameters": {
        "jsCode": "// Debug and process webhook data\nconsole.log('=== WEBHOOK DEBUG ===');\nconsole.log('Full $json:', JSON.stringify($json, null, 2));\n\n// Try different data access patterns\nlet data = $json;\nif ($json.body) {\n  console.log('Found body property');\n  data = typeof $json.body === 'string' ? JSON.parse($json.body) : $json.body;\n}\n\nconsole.log('Final data:', JSON.stringify(data, null, 2));\n\n// Return normalized data with fallbacks\nconst result = {\n  userId: data.userId || data.user_id || 'test-user-123',\n  platform: data.platform || 'twitter',\n  content: data.content || 'Default test content',\n  postId: data.postId || data.post_id || 'post-' + Date.now()\n};\n\nconsole.log('Returning:', JSON.stringify(result, null, 2));\nreturn result;"
      },
      "id": "process_data",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [360, 380]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT access_token, refresh_token, expires_at, platform, user_id FROM oauth_credentials WHERE user_id = '{{ $json.userId }}' AND platform = '{{ $json.platform }}' LIMIT 1;"
      },
      "id": "get_oauth",
      "name": "Get OAuth Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [580, 380],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Combine data and check OAuth\nconst postData = $node['Process Data'].json;\nconst oauth = $json;\n\nconsole.log('Post data:', postData);\nconsole.log('OAuth data:', oauth);\n\nif (!oauth.access_token) {\n  throw new Error(`No OAuth token found for user ${postData.userId} on platform ${postData.platform}`);\n}\n\nreturn {\n  ...postData,\n  access_token: oauth.access_token\n};"
      },
      "id": "combine_data",
      "name": "Combine Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 380]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "text": "={{ $json.content }}"
            }
          }
        }
      },
      "id": "post_twitter",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1020, 380]
    },
    {
      "parameters": {
        "jsCode": "// Prepare success response\nconst postData = $node['Process Data'].json;\nconst twitterResult = $json;\n\nconsole.log('Twitter API response:', twitterResult);\n\nreturn {\n  success: true,\n  message: 'Tweet posted successfully!',\n  postId: postData.postId,\n  twitterId: twitterResult.data?.id || 'unknown',\n  content: postData.content,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "success_response",
      "name": "Success Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 380]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook_response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1460, 380]
    }
  ],
  "connections": {
    "webhook_start": {
      "main": [
        [
          {
            "node": "process_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_data": {
      "main": [
        [
          {
            "node": "get_oauth",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get_oauth": {
      "main": [
        [
          {
            "node": "combine_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "combine_data": {
      "main": [
        [
          {
            "node": "post_twitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post_twitter": {
      "main": [
        [
          {
            "node": "success_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "success_response": {
      "main": [
        [
          {
            "node": "webhook_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
