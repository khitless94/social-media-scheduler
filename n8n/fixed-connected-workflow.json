{
  "name": "Social Media Scheduler - FIXED CONNECTIONS",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "schedule-post",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook - Schedule Post",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "schedule-post"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Trigger - Check Posts",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 600]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "options-check",
              "leftValue": "={{ $json.headers['request-method'] || $json.method }}",
              "rightValue": "OPTIONS",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-options",
      "name": "Check OPTIONS",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Access-Control-Allow-Methods", 
                "value": "POST, OPTIONS"
              },
              {
                "name": "Access-Control-Allow-Headers",
                "value": "Content-Type, Authorization, X-User-ID"
              },
              {
                "name": "Access-Control-Max-Age",
                "value": "86400"
              }
            ]
          }
        }
      },
      "id": "options-response",
      "name": "OPTIONS Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 200]
    },
    {
      "parameters": {
        "jsCode": "// Process webhook data for scheduling\nconst webhookData = $input.first().json;\nconst body = webhookData.body || {};\n\nconsole.log('📨 Webhook received - scheduling post:', JSON.stringify(body, null, 2));\n\n// Validate required fields\nif (!body.user_id || !body.content) {\n  throw new Error('Missing required fields: user_id and content are required');\n}\n\n// Extract platforms\nlet platforms = [];\nif (body.platforms && Array.isArray(body.platforms)) {\n  platforms = body.platforms;\n} else if (body.platform) {\n  platforms = [body.platform];\n} else {\n  throw new Error('No platform specified');\n}\n\n// Process scheduled time\nlet scheduledFor = new Date();\nif (body.scheduled_for) {\n  scheduledFor = new Date(body.scheduled_for);\n  console.log('📅 Post scheduled for:', scheduledFor.toISOString());\n} else {\n  // If no time specified, schedule for immediate posting (1 minute from now)\n  scheduledFor = new Date(Date.now() + 60000);\n  console.log('⚡ No schedule time - posting immediately in 1 minute');\n}\n\n// Structure the data\nconst processedData = {\n  post_id: body.post_id || `webhook-${Date.now()}`,\n  user_id: body.user_id,\n  content: body.content,\n  platforms: platforms,\n  media_urls: body.media_urls || [],\n  scheduled_for: scheduledFor.toISOString(),\n  action: 'schedule_post',\n  webhook_received: true\n};\n\nconsole.log('✅ Processed for scheduling:', processedData);\n\nreturn { json: processedData };"
      },
      "id": "process-webhook",
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 400]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO scheduled_posts_queue (post_id, user_id, content, platforms, media_urls, scheduled_for, status, created_at) VALUES ($1, $2, $3, $4, $5, $6, 'pending', NOW()) ON CONFLICT (post_id) DO UPDATE SET content = $3, platforms = $4, media_urls = $5, scheduled_for = $6, status = 'pending', updated_at = NOW()",
        "additionalFields": {
          "queryParameters": {
            "parameters": [
              {
                "name": "post_id",
                "value": "={{ $json.post_id }}"
              },
              {
                "name": "user_id", 
                "value": "={{ $json.user_id }}"
              },
              {
                "name": "content",
                "value": "={{ $json.content }}"
              },
              {
                "name": "platforms",
                "value": "={{ JSON.stringify($json.platforms) }}"
              },
              {
                "name": "media_urls",
                "value": "={{ JSON.stringify($json.media_urls) }}"
              },
              {
                "name": "scheduled_for",
                "value": "={{ $json.scheduled_for }}"
              }
            ]
          }
        }
      },
      "id": "save-to-queue",
      "name": "Save to Queue",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 400],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Post scheduled successfully\", \"post_id\": $json.post_id, \"scheduled_for\": $json.scheduled_for, \"platforms\": $json.platforms } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "webhook-success-response",
      "name": "Webhook Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": \"Webhook validation failed\", \"message\": $json.error || \"Invalid request data\" } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "webhook-error-response",
      "name": "Webhook Error Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT spq.*, get_user_oauth_credentials(spq.user_id) as oauth_credentials FROM scheduled_posts_queue spq WHERE spq.status = 'pending' AND spq.scheduled_for <= NOW()",
        "options": {}
      },
      "id": "fetch-pending-posts",
      "name": "Fetch Pending Posts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 600],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-posts",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-pending-posts",
      "name": "Check Pending Posts",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 600]
    },
    {
      "parameters": {
        "jsCode": "// Process each pending post\nconst posts = $input.all();\nconst results = [];\n\nconsole.log(`📋 Processing ${posts.length} pending posts for auto-posting`);\n\nfor (const post of posts) {\n  const postData = {\n    queue_id: post.json.id,\n    post_id: post.json.post_id,\n    user_id: post.json.user_id,\n    content: post.json.content,\n    platforms: JSON.parse(post.json.platforms || '[]'),\n    media_urls: JSON.parse(post.json.media_urls || '[]'),\n    scheduled_for: post.json.scheduled_for,\n    oauth_credentials: post.json.oauth_credentials || {}\n  };\n  \n  console.log(`📝 Auto-posting: \"${postData.content.substring(0, 50)}...\" to ${postData.platforms.join(', ')}`);\n  \n  results.push(postData);\n}\n\nreturn results.map(item => ({ json: item }));"
      },
      "id": "process-pending-posts",
      "name": "Process Pending Posts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE scheduled_posts_queue SET status = 'processing', updated_at = NOW() WHERE id = $1",
        "additionalFields": {
          "queryParameters": {
            "parameters": [
              {
                "name": "queue_id",
                "value": "={{ $json.queue_id }}"
              }
            ]
          }
        }
      },
      "id": "mark-processing",
      "name": "Mark as Processing",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 600],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Auto-publish to social media platforms\nconst postData = $input.first().json;\nconst platforms = postData.platforms || [];\nconst content = postData.content || '';\nconst mediaUrls = postData.media_urls || [];\nconst oauthCredentials = postData.oauth_credentials || {};\nconst queueId = postData.queue_id;\nconst postId = postData.post_id;\n\nconsole.log(`🚀 Auto-publishing post ${postId} to ${platforms.length} platforms`);\n\nconst results = [];\nconst platformPostIds = {};\nlet successCount = 0;\nlet failureCount = 0;\n\nfor (const platform of platforms) {\n  try {\n    console.log(`📤 Publishing to ${platform}...`);\n    \n    const credentials = oauthCredentials[platform];\n    if (!credentials || !credentials.access_token) {\n      throw new Error(`No OAuth credentials for ${platform}`);\n    }\n\n    let postResult;\n    switch (platform.toLowerCase()) {\n      case 'twitter':\n        postResult = await publishToTwitter(content, mediaUrls, credentials);\n        break;\n      case 'facebook':\n        postResult = await publishToFacebook(content, mediaUrls, credentials);\n        break;\n      case 'instagram':\n        postResult = await publishToInstagram(content, mediaUrls, credentials);\n        break;\n      case 'linkedin':\n        postResult = await publishToLinkedIn(content, mediaUrls, credentials);\n        break;\n      case 'reddit':\n        postResult = await publishToReddit(content, mediaUrls, credentials);\n        break;\n      default:\n        // For testing - simulate successful posting\n        postResult = {\n          id: `${platform}_${Date.now()}`,\n          url: `https://${platform}.com/post/${Date.now()}`\n        };\n        console.log(`✅ ${platform}: Simulated post created`);\n    }\n\n    results.push({\n      platform,\n      success: true,\n      postId: postResult.id,\n      url: postResult.url\n    });\n    \n    platformPostIds[platform] = postResult.id;\n    successCount++;\n    \n    console.log(`✅ ${platform}: ${postResult.url}`);\n\n  } catch (error) {\n    console.error(`❌ ${platform} failed: ${error.message}`);\n    results.push({\n      platform,\n      success: false,\n      error: error.message\n    });\n    failureCount++;\n  }\n}\n\n// Platform publishing functions (simplified for demo)\nasync function publishToTwitter(content, mediaUrls, credentials) {\n  console.log('🐦 Posting to Twitter:', content.substring(0, 50));\n  return { \n    id: `tw_${Date.now()}`, \n    url: `https://twitter.com/user/status/${Date.now()}` \n  };\n}\n\nasync function publishToFacebook(content, mediaUrls, credentials) {\n  console.log('📘 Posting to Facebook:', content.substring(0, 50));\n  return { \n    id: `fb_${Date.now()}`, \n    url: `https://facebook.com/${Date.now()}` \n  };\n}\n\nasync function publishToInstagram(content, mediaUrls, credentials) {\n  console.log('📷 Posting to Instagram:', content.substring(0, 50));\n  return { \n    id: `ig_${Date.now()}`, \n    url: `https://instagram.com/p/${Date.now()}` \n  };\n}\n\nasync function publishToLinkedIn(content, mediaUrls, credentials) {\n  console.log('💼 Posting to LinkedIn:', content.substring(0, 50));\n  return { \n    id: `li_${Date.now()}`, \n    url: `https://linkedin.com/feed/update/${Date.now()}` \n  };\n}\n\nasync function publishToReddit(content, mediaUrls, credentials) {\n  console.log('🤖 Posting to Reddit:', content.substring(0, 50));\n  return { \n    id: `rd_${Date.now()}`, \n    url: `https://reddit.com/r/test/comments/${Date.now()}` \n  };\n}\n\n// Return results\nconst finalStatus = failureCount === 0 ? 'completed' : \n                   successCount === 0 ? 'failed' : 'partial';\n\nconst summary = {\n  queue_id: queueId,\n  post_id: postId,\n  results,\n  platformPostIds,\n  successCount,\n  failureCount,\n  totalPlatforms: platforms.length,\n  status: finalStatus,\n  errorMessage: failureCount > 0 ? \n    results.filter(r => !r.success).map(r => `${r.platform}: ${r.error}`).join('; ') : null\n};\n\nconsole.log(`📊 Auto-post complete: ${successCount}/${platforms.length} successful, status: ${finalStatus}`);\n\nreturn { json: summary };"
      },
      "id": "auto-publish",
      "name": "Auto Publish to Platforms",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE scheduled_posts_queue SET status = $2, platform_post_ids = $3, error_message = $4, completed_at = CASE WHEN $2 = 'completed' THEN NOW() ELSE NULL END, updated_at = NOW() WHERE id = $1",
        "additionalFields": {
          "queryParameters": {
            "parameters": [
              {
                "name": "queue_id",
                "value": "={{ $json.queue_id }}"
              },
              {
                "name": "status",
                "value": "={{ $json.status }}"
              },
              {
                "name": "platform_post_ids",
                "value": "={{ JSON.stringify($json.platformPostIds) }}"
              },
              {
                "name": "error_message",
                "value": "={{ $json.errorMessage || null }}"
              }
            ]
          }
        }
      },
      "id": "update-final-status",
      "name": "Update Final Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 600],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "check-options",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "schedule-trigger": {
      "main": [
        [
          {
            "node": "fetch-pending-posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-options": {
      "main": [
        [
          {
            "node": "options-response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "process-webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-webhook": {
      "main": [
        [
          {
            "node": "save-to-queue",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "webhook-error-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save-to-queue": {
      "main": [
        [
          {
            "node": "webhook-success-response",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "webhook-error-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch-pending-posts": {
      "main": [
        [
          {
            "node": "check-pending-posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-pending-posts": {
      "main": [
        [],
        [
          {
            "node": "process-pending-posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-pending-posts": {
      "main": [
        [
          {
            "node": "mark-processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mark-processing": {
      "main": [
        [
          {
            "node": "auto-publish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "auto-publish": {
      "main": [
        [
          {
            "node": "update-final-status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
