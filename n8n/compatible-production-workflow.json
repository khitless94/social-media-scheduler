{
  "name": "Production Social Media Scheduler - Compatible",
  "nodes": [
    {
      "parameters": {
        "path": "schedule-post",
        "method": "POST",
        "responseMode": "responseNode"
      },
      "id": "webhook-trigger",
      "name": "Schedule Post Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [200, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process incoming webhook data for multi-user support\nconst body = $input.first().json.body;\nconst headers = $input.first().json.headers;\nlet data;\n\ntry {\n  data = typeof body === 'string' ? JSON.parse(body) : body;\n} catch (e) {\n  data = body;\n}\n\nconsole.log('ðŸ“¥ Received webhook data:', data);\nconsole.log('ðŸ“‹ Headers:', headers);\n\n// Extract user ID from multiple possible sources\nlet userId = null;\n\n// Method 1: From request body (preferred)\nif (data.user_id) {\n  userId = data.user_id;\n} else if (data.userId) {\n  userId = data.userId;\n}\n\n// Method 2: From headers as fallback\nif (!userId && headers['x-user-id']) {\n  userId = headers['x-user-id'];\n}\n\n// Validate required fields\nif (!userId) {\n  throw new Error('Missing user ID. Please provide user_id in request body or X-User-ID header.');\n}\n\n// Handle different request types\nlet platform, content;\n\nif (data.action === 'schedule_post') {\n  // Multi-platform scheduling from web app\n  platform = data.platforms && data.platforms.length > 0 ? data.platforms[0] : 'twitter';\n  content = data.content;\n} else {\n  // Direct single platform posting\n  platform = data.platform;\n  content = data.content;\n}\n\nif (!platform || !content) {\n  throw new Error('Missing required fields: platform and content');\n}\n\nconsole.log(`ðŸŽ¯ Processing request for user ${userId} on platform ${platform}`);\n\n// Return processed data\nreturn {\n  json: {\n    userId: userId,\n    platform: platform.toLowerCase(),\n    content: content,\n    postId: data.postId || data.post_id || `post-${Date.now()}`,\n    platforms: data.platforms || [platform],\n    scheduled_for: data.scheduled_for,\n    media_urls: data.media_urls || [],\n    action: data.action || 'direct_post',\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "process-webhook-data",
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 400]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/oauth_credentials",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVxaXV1a3d3cGRpeW5jYWhyZG55Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTE5MDkzNywiZXhwIjoyMDY0NzY2OTM3fQ.oUxZvopxq77zraXu4h3C2v31YSSRUZqwrXc48d-R8Zs"
            },
            {
              "name": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVxaXV1a3d3cGRpeW5jYWhyZG55Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTE5MDkzNywiZXhwIjoyMDY0NzY2OTM3fQ.oUxZvopxq77zraXu4h3C2v31YSSRUZqwrXc48d-R8Zs"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "user_id",
              "value": "eq.{{ $('Process Webhook Data').first().json.userId }}"
            },
            {
              "name": "platform",
              "value": "eq.{{ $('Process Webhook Data').first().json.platform }}"
            },
            {
              "name": "select",
              "value": "user_id,platform,access_token,refresh_token,expires_at,token_type,scope,platform_user_id,platform_username"
            }
          ]
        }
      },
      "id": "fetch-oauth-credentials",
      "name": "Fetch OAuth Credentials",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [600, 400]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $('Fetch OAuth Credentials').first().json.length }}",
              "operation": "larger",
              "value2": 0
            }
          ]
        }
      },
      "id": "check-credentials-exist",
      "name": "Check Credentials Exist",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [800, 400]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $('Process Webhook Data').first().json.platform }}",
        "rules": {
          "rules": [
            {
              "value2": "twitter",
              "output": 0
            },
            {
              "value2": "linkedin",
              "output": 1
            },
            {
              "value2": "facebook",
              "output": 2
            },
            {
              "value2": "reddit",
              "output": 3
            }
          ]
        }
      },
      "id": "route-by-platform",
      "name": "Route by Platform",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $('Fetch OAuth Credentials').first().json[0].access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"text\": $('Process Webhook Data').first().json.content\n} }}"
      },
      "id": "twitter-api-post",
      "name": "Twitter API Post",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1200, 200]
    },
    {
      "parameters": {
        "jsCode": "// Simple success response\nconst webhookData = $('Process Webhook Data').first().json;\nconst credentials = $('Fetch OAuth Credentials').first().json[0];\n\n// Get the response from the platform that was called\nlet platformResponse = null;\nlet success = false;\nlet errorMessage = null;\n\ntry {\n  // Check which platform was used and get its response\n  const platform = webhookData.platform;\n  \n  if (platform === 'twitter' && $input.first()) {\n    platformResponse = $input.first().json;\n    success = platformResponse.data && platformResponse.data.id;\n  }\n  \n} catch (error) {\n  errorMessage = error.message;\n  success = false;\n}\n\n// Return comprehensive response\nreturn {\n  json: {\n    success: success,\n    platform: webhookData.platform,\n    postId: webhookData.postId,\n    userId: webhookData.userId,\n    content: webhookData.content,\n    timestamp: webhookData.timestamp,\n    platformResponse: platformResponse,\n    error: errorMessage,\n    message: success ? `Successfully posted to ${webhookData.platform}` : `Failed to post to ${webhookData.platform}: ${errorMessage}`\n  }\n};"
      },
      "id": "merge-responses",
      "name": "Merge Responses",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1400, 350]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('Merge Responses').first().json }}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1600, 350]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"success\": false,\n  \"error\": \"No OAuth credentials found for user \" + $('Process Webhook Data').first().json.userId + \" on platform \" + $('Process Webhook Data').first().json.platform + \". Please connect your \" + $('Process Webhook Data').first().json.platform + \" account in the web app first.\",\n  \"userId\": $('Process Webhook Data').first().json.userId,\n  \"platform\": $('Process Webhook Data').first().json.platform,\n  \"action\": $('Process Webhook Data').first().json.action,\n  \"postId\": $('Process Webhook Data').first().json.postId,\n  \"timestamp\": new Date().toISOString(),\n  \"help\": \"Visit your dashboard to connect social media accounts\"\n} }}"
      },
      "id": "no-credentials-response",
      "name": "No Credentials Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1000, 500]
    }
  ],
  "connections": {
    "Schedule Post Webhook": {
      "main": [
        [
          {
            "node": "Process Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Webhook Data": {
      "main": [
        [
          {
            "node": "Fetch OAuth Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch OAuth Credentials": {
      "main": [
        [
          {
            "node": "Check Credentials Exist",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Credentials Exist": {
      "main": [
        [
          {
            "node": "Route by Platform",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Credentials Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Platform": {
      "main": [
        [
          {
            "node": "Twitter API Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Twitter API Post": {
      "main": [
        [
          {
            "node": "Merge Responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Responses": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["production", "compatible"],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T12:00:00.000Z",
  "versionId": "3.0"
}
