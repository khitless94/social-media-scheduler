{
  "name": "Social Media Scheduled Posting - Enhanced",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_pending_scheduled_posts()",
        "options": {}
      },
      "id": "fetch-pending-posts",
      "name": "Fetch Pending Posts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-posts",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-has-posts",
      "name": "Check Has Posts",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Split posts for individual processing\nconst posts = $input.all();\nconst results = [];\n\nfor (const post of posts) {\n  results.push({\n    queueId: post.json.queue_id,\n    postId: post.json.post_id,\n    userId: post.json.user_id,\n    content: post.json.content,\n    platforms: post.json.platforms || [],\n    mediaUrls: post.json.media_urls || [],\n    scheduledFor: post.json.scheduled_for,\n    oauthCredentials: post.json.oauth_credentials || {}\n  });\n}\n\nreturn results.map(item => ({ json: item }));"
      },
      "id": "split-posts",
      "name": "Split Posts for Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 180]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "queue-id",
              "name": "queueId",
              "value": "={{ $json.queue_id }}",
              "type": "string"
            },
            {
              "id": "post-id", 
              "name": "postId",
              "value": "={{ $json.post_id }}",
              "type": "string"
            },
            {
              "id": "user-id",
              "name": "userId", 
              "value": "={{ $json.user_id }}",
              "type": "string"
            },
            {
              "id": "content",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            },
            {
              "id": "platforms",
              "name": "platforms",
              "value": "={{ $json.platforms }}",
              "type": "array"
            },
            {
              "id": "media-urls",
              "name": "mediaUrls",
              "value": "={{ $json.media_urls }}",
              "type": "array"
            },
            {
              "id": "oauth-credentials",
              "name": "oauthCredentials",
              "value": "={{ $json.oauth_credentials }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "prepare-post-data",
      "name": "Prepare Post Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [900, 180]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT update_scheduled_post_status('{{ $json.queueId }}', 'processing', '{{ $workflow.id }}-{{ $execution.id }}')",
        "options": {}
      },
      "id": "mark-processing",
      "name": "Mark as Processing",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 180],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Social Media Publishing Logic with Better Error Handling\nconst postData = $input.first().json;\nconst platforms = postData.platforms || [];\nconst content = postData.content || '';\nconst mediaUrls = postData.mediaUrls || [];\nconst oauthCredentials = postData.oauthCredentials || {};\nconst queueId = postData.queueId;\nconst postId = postData.postId;\nconst userId = postData.userId;\n\nconsole.log(`Processing post ${postId} for platforms:`, platforms);\n\nconst results = [];\nconst platformPostIds = {};\n\n// Process each platform\nfor (const platform of platforms) {\n  try {\n    console.log(`Publishing to ${platform}...`);\n    \n    const credentials = oauthCredentials[platform];\n    if (!credentials || !credentials.access_token) {\n      throw new Error(`No OAuth credentials found for ${platform}`);\n    }\n\n    // Check if token is expired and needs refresh\n    if (credentials.expires_at && new Date(credentials.expires_at) <= new Date()) {\n      console.log(`Token expired for ${platform}, attempting refresh...`);\n      // In production, implement token refresh logic here\n      throw new Error(`Access token expired for ${platform}`);\n    }\n\n    let postResult;\n    switch (platform.toLowerCase()) {\n      case 'twitter':\n        postResult = await publishToTwitter(content, mediaUrls, credentials);\n        break;\n      case 'facebook':\n        postResult = await publishToFacebook(content, mediaUrls, credentials);\n        break;\n      case 'instagram':\n        postResult = await publishToInstagram(content, mediaUrls, credentials);\n        break;\n      case 'linkedin':\n        postResult = await publishToLinkedIn(content, mediaUrls, credentials, userId);\n        break;\n      case 'reddit':\n        postResult = await publishToReddit(content, mediaUrls, credentials);\n        break;\n      default:\n        throw new Error(`Unsupported platform: ${platform}`);\n    }\n\n    results.push({\n      platform,\n      success: true,\n      postId: postResult.id,\n      url: postResult.url,\n      message: `Successfully published to ${platform}`\n    });\n    \n    platformPostIds[platform] = postResult.id;\n    console.log(`✅ Successfully published to ${platform}: ${postResult.url}`);\n\n  } catch (error) {\n    console.error(`❌ Failed to publish to ${platform}:`, error.message);\n    results.push({\n      platform,\n      success: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n  }\n  \n  // Add delay between platform posts to respect rate limits\n  await new Promise(resolve => setTimeout(resolve, 1000));\n}\n\n// Enhanced helper functions with better error handling\nasync function publishToTwitter(content, mediaUrls, credentials) {\n  try {\n    const tweetData = { text: content };\n    \n    // Handle media uploads if present\n    if (mediaUrls && mediaUrls.length > 0) {\n      const mediaIds = [];\n      for (const mediaUrl of mediaUrls.slice(0, 4)) { // Twitter allows max 4 media\n        try {\n          const mediaId = await uploadTwitterMedia(mediaUrl, credentials.access_token);\n          mediaIds.push(mediaId);\n        } catch (mediaError) {\n          console.warn(`Failed to upload media to Twitter: ${mediaError.message}`);\n        }\n      }\n      if (mediaIds.length > 0) {\n        tweetData.media = { media_ids: mediaIds };\n      }\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://api.twitter.com/2/tweets',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      body: tweetData\n    });\n    \n    if (!response.data || !response.data.id) {\n      throw new Error('Invalid response from Twitter API');\n    }\n    \n    return { \n      id: response.data.id, \n      url: `https://twitter.com/user/status/${response.data.id}` \n    };\n  } catch (error) {\n    throw new Error(`Twitter API error: ${error.message}`);\n  }\n}\n\nasync function uploadTwitterMedia(mediaUrl, accessToken) {\n  // This is a simplified version - in production, implement proper media upload\n  // Twitter requires uploading media first, then referencing in tweet\n  throw new Error('Media upload not implemented for Twitter');\n}\n\nasync function publishToFacebook(content, mediaUrls, credentials) {\n  try {\n    const postData = {\n      message: content,\n      access_token: credentials.access_token\n    };\n    \n    // Handle single image/video\n    if (mediaUrls && mediaUrls.length > 0) {\n      postData.link = mediaUrls[0]; // Facebook can auto-preview links\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://graph.facebook.com/me/feed',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: postData\n    });\n    \n    if (!response.id) {\n      throw new Error('Invalid response from Facebook API');\n    }\n    \n    return { \n      id: response.id, \n      url: `https://facebook.com/${response.id}` \n    };\n  } catch (error) {\n    throw new Error(`Facebook API error: ${error.message}`);\n  }\n}\n\nreturn [{ \n  results, \n  queueId, \n  postId, \n  platformPostIds,\n  successCount: results.filter(r => r.success).length,\n  failureCount: results.filter(r => !r.success).length,\n  timestamp: new Date().toISOString()\n}];"
      },
      "id": "publish-to-platforms",
      "name": "Publish to Platforms",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "jsCode": "const results = $input.first().json.results;\nconst queueId = $input.first().json.queueId;\nconst postId = $input.first().json.postId;\n\nconst successfulPosts = results.filter(r => r.success);\nconst failedPosts = results.filter(r => !r.success);\n\nconst platformPostIds = {};\nsuccessfulPosts.forEach(post => {\n  platformPostIds[post.platform] = post.postId;\n});\n\nconst allSuccessful = failedPosts.length === 0;\nconst status = allSuccessful ? 'completed' : 'failed';\nconst errorMessage = failedPosts.length > 0 ? \n  `Failed platforms: ${failedPosts.map(p => `${p.platform}: ${p.error}`).join(', ')}` : \n  null;\n\nreturn [{\n  queueId,\n  postId,\n  status,\n  errorMessage,\n  platformPostIds,\n  successCount: successfulPosts.length,\n  failureCount: failedPosts.length\n}];"
      },
      "id": "process-results",
      "name": "Process Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 180]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT update_scheduled_post_status('{{ $json.queueId }}', '{{ $json.status }}', '{{ $workflow.id }}-{{ $execution.id }}', {{ $json.errorMessage ? `'${$json.errorMessage}'` : 'NULL' }}, '{{ JSON.stringify($json.platformPostIds) }}'::jsonb)",
        "options": {}
      },
      "id": "update-final-status",
      "name": "Update Final Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1780, 180],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Pending Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Pending Posts": {
      "main": [
        [
          {
            "node": "Check Has Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Has Posts": {
      "main": [
        [
          {
            "node": "Prepare Post Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Post Data": {
      "main": [
        [
          {
            "node": "Mark as Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Processing": {
      "main": [
        [
          {
            "node": "Publish to Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish to Platforms": {
      "main": [
        [
          {
            "node": "Process Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Results": {
      "main": [
        [
          {
            "node": "Update Final Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
