{
  "name": "Social Media Scheduler - Working Flow",
  "nodes": [
    {
      "parameters": {
        "path": "schedule-post",
        "method": "POST",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook_trigger",
      "name": "Schedule Post Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [140, 380]
    },
    {
      "parameters": {
        "jsCode": "// Process incoming webhook data\nconsole.log('Raw webhook data:', $json);\n\n// Handle different data structures\nlet data;\nif ($json.body) {\n  // Data is in body property\n  data = typeof $json.body === 'string' ? JSON.parse($json.body) : $json.body;\n} else {\n  // Data is directly in $json\n  data = $json;\n}\n\nconsole.log('Processed data:', data);\n\n// Extract and normalize data\nreturn {\n  userId: data.userId || data.user_id || 'unknown',\n  platform: data.platform || 'twitter',\n  content: data.content || 'Test post',\n  postId: data.postId || data.post_id || 'auto-' + Date.now(),\n  scheduledFor: data.scheduledFor || data.scheduled_for || new Date().toISOString()\n};"
      },
      "id": "process_webhook_data",
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [360, 380]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  oc.access_token,\n  oc.refresh_token,\n  oc.expires_at,\n  oc.platform,\n  oc.user_id\nFROM oauth_credentials oc\nWHERE oc.user_id = '{{ $json.userId }}' \nAND oc.platform = '{{ $json.platform }}'\nLIMIT 1;"
      },
      "id": "fetch_oauth_credentials",
      "name": "Fetch OAuth Credentials",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [580, 380],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge webhook data with OAuth credentials\nconst webhookData = $node['Process Webhook Data'].json;\nconst credentials = $json;\n\nif (!credentials.access_token) {\n  throw new Error(`No OAuth credentials found for platform: ${webhookData.platform}`);\n}\n\nreturn {\n  ...webhookData,\n  access_token: credentials.access_token,\n  refresh_token: credentials.refresh_token,\n  expires_at: credentials.expires_at\n};"
      },
      "id": "merge_data",
      "name": "Merge Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 380]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.platform }}",
        "rules": {
          "rules": [
            {
              "value2": "twitter",
              "operation": "equal"
            },
            {
              "value2": "facebook",
              "operation": "equal"
            },
            {
              "value2": "linkedin",
              "operation": "equal"
            },
            {
              "value2": "reddit",
              "operation": "equal"
            },
            {
              "value2": "instagram",
              "operation": "equal"
            }
          ]
        }
      },
      "id": "route_by_platform",
      "name": "Route by Platform",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1020, 380]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "text": "={{ $json.content }}"
            }
          }
        }
      },
      "id": "post_to_twitter",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1240, 280]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://graph.facebook.com/v18.0/me/feed",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "message": "={{ $json.content }}",
              "access_token": "={{ $json.access_token }}"
            }
          }
        }
      },
      "id": "post_to_facebook",
      "name": "Post to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1240, 380]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "author": "urn:li:person:{{ $json.userId }}",
              "lifecycleState": "PUBLISHED",
              "specificContent": {
                "com.linkedin.ugc.ShareContent": {
                  "shareCommentary": {
                    "text": "={{ $json.content }}"
                  },
                  "shareMediaCategory": "NONE"
                }
              },
              "visibility": {
                "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
              }
            }
          }
        }
      },
      "id": "post_to_linkedin",
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1240, 480]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://oauth.reddit.com/api/submit",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "User-Agent": "SocialMediaScheduler/1.0"
          },
          "body": {
            "bodyType": "form",
            "values": {
              "api_type": "json",
              "kind": "self",
              "sr": "test",
              "title": "{{ $json.content.substring(0, 100) }}",
              "text": "={{ $json.content }}"
            }
          }
        }
      },
      "id": "post_to_reddit",
      "name": "Post to Reddit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1240, 580]
    },
    {
      "parameters": {
        "jsCode": "// Simulate Instagram posting (requires complex media upload)\nconsole.log('Instagram posting not implemented - requires media upload');\nthrow new Error('Instagram posting requires media upload implementation');"
      },
      "id": "post_to_instagram",
      "name": "Post to Instagram",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1240, 680]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll"
      },
      "id": "merge_responses",
      "name": "Merge Responses",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1460, 480]
    },
    {
      "parameters": {
        "jsCode": "// Prepare success response\nconst webhookData = $node['Process Webhook Data'].json;\nconst postResult = $json;\n\nreturn {\n  success: true,\n  message: 'Post published successfully',\n  platform: webhookData.platform,\n  postId: webhookData.postId,\n  platformPostId: postResult.data?.id || postResult.id || 'unknown',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "prepare_response",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 480]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook_response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1900, 480]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "process_webhook_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process_webhook_data": {
      "main": [
        [
          {
            "node": "fetch_oauth_credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_oauth_credentials": {
      "main": [
        [
          {
            "node": "merge_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "merge_data": {
      "main": [
        [
          {
            "node": "route_by_platform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "route_by_platform": {
      "main": [
        [
          {
            "node": "post_to_twitter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_facebook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_linkedin",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_reddit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post_to_twitter": {
      "main": [
        [
          {
            "node": "merge_responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post_to_facebook": {
      "main": [
        [
          {
            "node": "merge_responses",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "post_to_linkedin": {
      "main": [
        [
          {
            "node": "merge_responses",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "post_to_reddit": {
      "main": [
        [
          {
            "node": "merge_responses",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "post_to_instagram": {
      "main": [
        [
          {
            "node": "merge_responses",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "merge_responses": {
      "main": [
        [
          {
            "node": "prepare_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare_response": {
      "main": [
        [
          {
            "node": "webhook_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
