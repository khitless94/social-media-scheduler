{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "schedule-post",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "687cc764-89fd-4819-b889-512274faddba",
      "name": "Schedule Post Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1100,
        400
      ],
      "webhookId": "300be5b4-e75f-41c2-a009-8ca60bfdd1d9"
    },
    {
      "parameters": {
        "jsCode": "// Process webhook data for multi-user support\nconsole.log('=== PRODUCTION WEBHOOK DEBUG ===');\n\n// Try to get data from webhook\nlet data = {};\nlet headers = {};\n\ntry {\n  // Get the raw webhook data\n  const input = $input.first().json;\n  console.log('Raw input:', JSON.stringify(input, null, 2));\n  \n  // Extract body and headers\n  if (input.body) {\n    data = typeof input.body === 'string' ? JSON.parse(input.body) : input.body;\n  } else {\n    data = input; // Direct data\n  }\n  \n  headers = input.headers || {};\n  \n} catch (e) {\n  console.log('Error parsing webhook data:', e.message);\n  // Fallback to direct JSON\n  data = $json || {};\n}\n\nconsole.log('Parsed data:', JSON.stringify(data, null, 2));\nconsole.log('Headers:', JSON.stringify(headers, null, 2));\n\n// Extract user ID from multiple sources\nlet userId = null;\n\n// Method 1: From request body (preferred)\nif (data.user_id) {\n  userId = data.user_id;\n} else if (data.userId) {\n  userId = data.userId;\n}\n\n// Method 2: From headers as fallback\nif (!userId && headers['x-user-id']) {\n  userId = headers['x-user-id'];\n}\n\n// Method 3: Use hardcoded for testing if nothing found\nif (!userId) {\n  console.log('‚ö†Ô∏è No user ID found, using default for testing');\n  userId = 'd33d28ea-cc43-4dd0-b971-e896acf853e3'; // Your real user ID\n}\n\n// Handle different request types\nlet platform, content;\n\n// Always use 'platform' (singular) for consistency\nplatform = data.platform;\ncontent = data.content || 'Test post from production workflow! üöÄ';\n\n// Validate platform is provided\nif (!platform) {\n  console.log('‚ùå No platform specified in request');\n  throw new Error('Platform is required. Please specify platform in your request.');\n}\n\n// Validate platform is supported\nconst supportedPlatforms = ['twitter', 'facebook', 'linkedin', 'reddit', 'instagram'];\nif (!supportedPlatforms.includes(platform.toLowerCase())) {\n  console.log(`‚ùå Unsupported platform: ${platform}`);\n  throw new Error(`Unsupported platform: ${platform}. Supported platforms: ${supportedPlatforms.join(', ')}`);\n}\n\nconsole.log(`üéØ Processing request for user ${userId} on platform ${platform}`);\n\n// Return processed data\nreturn {\n  userId: userId,\n  platform: platform.toLowerCase(),\n  content: content,\n  postId: data.postId || data.post_id || `post-${Date.now()}`,\n  scheduled_for: data.scheduled_for,\n  media_urls: data.media_urls || [],\n  action: data.action || 'direct_post',\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "7837b547-141c-4cf2-bd34-0dfaadd80052",
      "name": "Process Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        400
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    user_id,\n    platform,\n    access_token,\n    refresh_token,\n    expires_at,\n    created_at\nFROM oauth_credentials \nWHERE user_id = $1::UUID \n  AND platform = $2\n  AND access_token IS NOT NULL\nORDER BY created_at DESC\nLIMIT 1;",
        "additionalFields": {
          "queryParameters": "={{ [\n  $('Process Webhook Data').first().json.userId,\n  $('Process Webhook Data').first().json.platform\n] }}"
        },
        "options": {}
      },
      "id": "46f4d85d-a381-468a-a2e7-92e4d3812df7",
      "name": "Fetch OAuth Credentials",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        -660,
        400
      ],
      "credentials": {
        "postgres": {
          "id": "E7r1BJUUA005LCJY",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge webhook data with OAuth credentials\nconsole.log('=== MERGE DATA DEBUG ===');\n\n// Get data from previous nodes\nconst webhookData = $node['Process Webhook Data'].json;\nconst credentials = $json; // OAuth data from database\n\nconsole.log('Webhook data:', JSON.stringify(webhookData, null, 2));\nconsole.log('Credentials data:', JSON.stringify(credentials, null, 2));\n\n// Check if we have OAuth credentials\nif (!credentials || !credentials.access_token) {\n  console.log('‚ùå No OAuth credentials found');\n  throw new Error(`No OAuth credentials found for user ${webhookData.userId} on platform ${webhookData.platform}. Please connect your ${webhookData.platform} account in the web app first.`);\n}\n\nconsole.log('‚úÖ OAuth credentials found');\n\n// Check if token is expired\nif (credentials.expires_at) {\n  const now = new Date();\n  const expiresAt = new Date(credentials.expires_at);\n  if (expiresAt < now) {\n    console.log('‚ö†Ô∏è Token is expired, needs refresh');\n  }\n}\n\n// Merge the data\nreturn {\n  // Webhook data\n  userId: webhookData.userId,\n  platform: webhookData.platform,\n  content: webhookData.content,\n  postId: webhookData.postId,\n  \n  // OAuth credentials\n  access_token: credentials.access_token,\n  refresh_token: credentials.refresh_token,\n  expires_at: credentials.expires_at,\n  platform_user_id: credentials.platform_user_id,\n  platform_username: credentials.platform_username\n};"
      },
      "id": "f19e7867-570a-4c66-811b-d730080440c1",
      "name": "Merge Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -440,
        400
      ]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.platform }}",
        "rules": {
          "rules": [
            {
              "value2": "twitter",
              "output": 0
            },
            {
              "value2": "facebook",
              "output": 1
            },
            {
              "value2": "linkedin",
              "output": 2
            },
            {
              "value2": "reddit",
              "output": 3
            },
            {
              "value2": "instagram",
              "output": 4
            }
          ]
        }
      },
      "id": "5b8661fc-4a36-4f80-a969-690adfd4afcb",
      "name": "Route by Platform",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [
        -220,
        380
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"text\": $json.content\n} }}"
      },
      "id": "7674a78d-a834-4246-a414-5009676c87c3",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/feed",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $json.content }}"
            }
          ]
        }
      },
      "id": "2338cd92-1c8b-476a-a7b1-6e8ee0e4144f",
      "name": "Post to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ {\n  \"author\": \"urn:li:person:\" + $json.platform_user_id,\n  \"lifecycleState\": \"PUBLISHED\",\n  \"specificContent\": {\n    \"com.linkedin.ugc.ShareContent\": {\n      \"shareCommentary\": {\n        \"text\": $json.content\n      },\n      \"shareMediaCategory\": \"NONE\"\n    }\n  },\n  \"visibility\": {\n    \"com.linkedin.ugc.MemberNetworkVisibility\": \"PUBLIC\"\n  }\n} }}"
      },
      "id": "4f621ea2-4486-426d-8c1e-da5ada1b5c34",
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://oauth.reddit.com/api/submit",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            },
            {
              "name": "User-Agent",
              "value": "SocialMediaScheduler/1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "sr",
              "value": "test"
            },
            {
              "name": "kind",
              "value": "self"
            },
            {
              "name": "title",
              "value": "Scheduled Post"
            },
            {
              "name": "text",
              "value": "={{ $json.content }}"
            }
          ]
        }
      },
      "id": "5c35a1fb-9d43-4495-8b65-42e3fa762456",
      "name": "Post to Reddit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        0,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// Simulate Instagram posting (requires complex media upload)\nconsole.log('Instagram posting not implemented - requires media upload');\nthrow new Error('Instagram posting requires media upload implementation');"
      },
      "id": "637a1a40-7db7-43f1-9814-b1444c30fa6e",
      "name": "Post to Instagram",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "// Simple success response\nconst webhookData = $node['Process Webhook Data'].json;\n\nconsole.log('Creating response for platform:', webhookData.platform);\nconsole.log('User ID:', webhookData.userId);\n\n// Get platform response if available\nlet platformResponse = null;\nlet platformPostId = 'unknown';\n\ntry {\n  platformResponse = $json;\n  \n  // Extract platform-specific post ID\n  if (platformResponse.data?.id) {\n    platformPostId = platformResponse.data.id; // Twitter\n  } else if (platformResponse.id) {\n    platformPostId = platformResponse.id; // Facebook, LinkedIn\n  }\n} catch (e) {\n  console.log('No platform response available');\n}\n\nreturn {\n  success: true,\n  message: `Successfully posted to ${webhookData.platform}`,\n  platform: webhookData.platform,\n  postId: webhookData.postId,\n  userId: webhookData.userId,\n  content: webhookData.content,\n  platformPostId: platformPostId,\n  timestamp: new Date().toISOString(),\n  platformResponse: platformResponse\n};"
      },
      "id": "bb4755c0-f140-452e-ae94-b5d818ffc610",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        400
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "webhook-response-node",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        660,
        400
      ]
    }
  ],
  "connections": {
    "Schedule Post Webhook": {
      "main": [
        [
          {
            "node": "Process Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Webhook Data": {
      "main": [
        [
          {
            "node": "Fetch OAuth Credentials",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch OAuth Credentials": {
      "main": [
        [
          {
            "node": "Merge Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data": {
      "main": [
        [
          {
            "node": "Route by Platform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Platform": {
      "main": [
        [
          {
            "node": "Post to Twitter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post to Facebook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post to LinkedIn",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post to Reddit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Post to Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Twitter": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Facebook": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to LinkedIn": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Reddit": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Instagram": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "fde9763b8044604bc07985ad1250ae04991926daedc356fa9cf1585f9efdf302"
  }
}
