{
  "name": "Complete Social Media Scheduler - Production Ready",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Every Minute Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300],
      "notes": "Triggers every minute to check for pending scheduled posts"
    },
    {
      "parameters": {
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/rpc/get_pending_scheduled_posts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "fetch-pending-posts",
      "name": "Fetch Pending Posts",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [460, 300],
      "credentials": {
        "supabaseApi": {
          "name": "Supabase API"
        }
      },
      "notes": "Fetches posts that are scheduled and due for publishing"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-posts",
              "leftValue": "={{ Array.isArray($json) ? $json.length : 0 }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-has-posts",
      "name": "Has Posts to Process?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300],
      "notes": "Only proceed if there are posts to process"
    },
    {
      "parameters": {
        "jsCode": "// Process and validate pending posts\nconst posts = Array.isArray($input.first().json) ? $input.first().json : [];\nconst validPosts = [];\n\nconsole.log(`📋 Processing ${posts.length} scheduled posts`);\n\nfor (const post of posts) {\n  // Validate required fields\n  if (!post.queue_id || !post.post_id || !post.content) {\n    console.warn(`⚠️ Skipping invalid post: missing required fields`);\n    continue;\n  }\n\n  const postData = {\n    queueId: post.queue_id,\n    postId: post.post_id,\n    userId: post.user_id,\n    content: post.content,\n    platforms: Array.isArray(post.platforms) ? post.platforms : [],\n    mediaUrls: Array.isArray(post.media_urls) ? post.media_urls : [],\n    scheduledFor: post.scheduled_for,\n    oauthCredentials: post.oauth_credentials || {}\n  };\n  \n  // Validate platforms\n  if (postData.platforms.length === 0) {\n    console.warn(`⚠️ Skipping post ${postData.postId}: no platforms specified`);\n    continue;\n  }\n  \n  console.log(`📝 Post ${postData.postId}: \"${postData.content.substring(0, 50)}...\"`);\n  console.log(`📱 Platforms: ${postData.platforms.join(', ')}`);\n  console.log(`👤 User: ${postData.userId}`);\n  \n  validPosts.push(postData);\n}\n\nconsole.log(`✅ ${validPosts.length} valid posts ready for processing`);\n\nreturn validPosts.map(item => ({ json: item }));"
      },
      "id": "process-posts",
      "name": "Process and Validate Posts",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 180],
      "notes": "Validates and processes post data before publishing"
    },
    {
      "parameters": {
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/rpc/update_scheduled_post_status",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"queue_id_param\": \"{{ $json.queueId }}\",\n  \"new_status\": \"processing\",\n  \"execution_id_param\": \"{{ $workflow.id }}-{{ $execution.id }}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "mark-processing",
      "name": "Mark as Processing",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 180],
      "credentials": {
        "supabaseApi": {
          "name": "Supabase API"
        }
      },
      "notes": "Updates database to mark post as being processed"
    },
    {
      "parameters": {
        "jsCode": "// Complete Social Media Publishing System\nconst postData = $input.first().json;\nconst platforms = postData.platforms || [];\nconst content = postData.content || '';\nconst mediaUrls = postData.mediaUrls || [];\nconst oauthCredentials = postData.oauthCredentials || {};\nconst queueId = postData.queueId;\nconst postId = postData.postId;\nconst userId = postData.userId;\n\nconsole.log(`🚀 Publishing post ${postId} to ${platforms.length} platforms`);\nconsole.log(`📝 Content: ${content.substring(0, 100)}${content.length > 100 ? '...' : ''}`);\n\nconst results = [];\nconst platformPostIds = {};\nlet successCount = 0;\nlet failureCount = 0;\n\n// Configuration\nconst RATE_LIMIT_DELAY = 3000; // 3 seconds between platforms\nconst MAX_RETRIES = 2;\nconst REQUEST_TIMEOUT = 30000; // 30 seconds\n\n// Process each platform\nfor (const platform of platforms) {\n  let retryCount = 0;\n  let success = false;\n  \n  while (retryCount < MAX_RETRIES && !success) {\n    try {\n      console.log(`📤 Publishing to ${platform} (attempt ${retryCount + 1}/${MAX_RETRIES})...`);\n      \n      const credentials = oauthCredentials[platform];\n      if (!credentials || !credentials.access_token) {\n        throw new Error(`No OAuth credentials found for ${platform}`);\n      }\n\n      // Check token expiration\n      if (credentials.expires_at) {\n        const expiryDate = new Date(credentials.expires_at);\n        const now = new Date();\n        const timeUntilExpiry = expiryDate.getTime() - now.getTime();\n        \n        if (timeUntilExpiry <= 0) {\n          throw new Error(`Access token expired for ${platform} (expired: ${expiryDate.toISOString()})`);\n        }\n        \n        if (timeUntilExpiry < 300000) { // 5 minutes\n          console.warn(`⚠️ Token for ${platform} expires soon: ${expiryDate.toISOString()}`);\n        }\n      }\n\n      let postResult;\n      switch (platform.toLowerCase()) {\n        case 'twitter':\n          postResult = await publishToTwitter(content, mediaUrls, credentials);\n          break;\n        case 'facebook':\n          postResult = await publishToFacebook(content, mediaUrls, credentials);\n          break;\n        case 'instagram':\n          postResult = await publishToInstagram(content, mediaUrls, credentials);\n          break;\n        case 'linkedin':\n          postResult = await publishToLinkedIn(content, mediaUrls, credentials);\n          break;\n        case 'reddit':\n          postResult = await publishToReddit(content, mediaUrls, credentials);\n          break;\n        default:\n          throw new Error(`Unsupported platform: ${platform}`);\n      }\n\n      // Success\n      results.push({\n        platform,\n        success: true,\n        postId: postResult.id,\n        url: postResult.url,\n        attempts: retryCount + 1,\n        timestamp: new Date().toISOString()\n      });\n      \n      platformPostIds[platform] = postResult.id;\n      successCount++;\n      success = true;\n      \n      console.log(`✅ ${platform}: ${postResult.url}`);\n\n    } catch (error) {\n      retryCount++;\n      const errorMsg = error.message || 'Unknown error';\n      console.error(`❌ ${platform} attempt ${retryCount} failed: ${errorMsg}`);\n      \n      if (retryCount >= MAX_RETRIES) {\n        results.push({\n          platform,\n          success: false,\n          error: errorMsg,\n          attempts: retryCount,\n          timestamp: new Date().toISOString()\n        });\n        failureCount++;\n      } else {\n        // Exponential backoff for retries\n        const delay = 1000 * Math.pow(2, retryCount);\n        console.log(`⏳ Waiting ${delay}ms before retry...`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n  }\n  \n  // Rate limiting between platforms\n  const platformIndex = platforms.indexOf(platform);\n  if (platformIndex < platforms.length - 1) {\n    console.log(`⏳ Rate limiting: waiting ${RATE_LIMIT_DELAY}ms before next platform...`);\n    await new Promise(resolve => setTimeout(resolve, RATE_LIMIT_DELAY));\n  }\n}\n\n// Platform-specific publishing functions\nasync function publishToTwitter(content, mediaUrls, credentials) {\n  try {\n    // Twitter character limit\n    const tweetText = content.length > 280 ? content.substring(0, 277) + '...' : content;\n    \n    const requestBody = { text: tweetText };\n    \n    // Note: Media upload would require additional implementation\n    if (mediaUrls && mediaUrls.length > 0) {\n      console.log(`📎 Twitter: ${mediaUrls.length} media files detected (media upload not implemented)`);\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://api.twitter.com/2/tweets',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      body: requestBody,\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!response.data || !response.data.id) {\n      throw new Error('Invalid response from Twitter API: missing tweet ID');\n    }\n    \n    return { \n      id: response.data.id, \n      url: `https://twitter.com/user/status/${response.data.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      const status = error.response.status;\n      const data = error.response.data;\n      throw new Error(`Twitter API error (${status}): ${JSON.stringify(data)}`);\n    }\n    throw new Error(`Twitter error: ${error.message}`);\n  }\n}\n\nasync function publishToFacebook(content, mediaUrls, credentials) {\n  try {\n    const postData = {\n      message: content,\n      access_token: credentials.access_token\n    };\n    \n    // Add link preview for media\n    if (mediaUrls && mediaUrls.length > 0) {\n      console.log(`📎 Facebook: Adding media as link preview`);\n      postData.link = mediaUrls[0];\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://graph.facebook.com/me/feed',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: postData,\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!response.id) {\n      throw new Error('Invalid response from Facebook API: missing post ID');\n    }\n    \n    return { \n      id: response.id, \n      url: `https://facebook.com/${response.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      const status = error.response.status;\n      const data = error.response.data;\n      throw new Error(`Facebook API error (${status}): ${JSON.stringify(data)}`);\n    }\n    throw new Error(`Facebook error: ${error.message}`);\n  }\n}\n\nasync function publishToInstagram(content, mediaUrls, credentials) {\n  try {\n    if (!mediaUrls || mediaUrls.length === 0) {\n      throw new Error('Instagram posts require at least one media file');\n    }\n    \n    console.log(`📎 Instagram: Creating media container for ${mediaUrls[0]}`);\n    \n    // Step 1: Create media container\n    const mediaData = {\n      image_url: mediaUrls[0],\n      caption: content,\n      access_token: credentials.access_token\n    };\n    \n    const mediaResponse = await $http.request({\n      method: 'POST',\n      url: 'https://graph.instagram.com/me/media',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: mediaData,\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!mediaResponse.id) {\n      throw new Error('Failed to create Instagram media container');\n    }\n    \n    console.log(`📎 Instagram: Publishing media container ${mediaResponse.id}`);\n    \n    // Step 2: Publish media\n    const publishData = {\n      creation_id: mediaResponse.id,\n      access_token: credentials.access_token\n    };\n    \n    const publishResponse = await $http.request({\n      method: 'POST',\n      url: 'https://graph.instagram.com/me/media_publish',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: publishData,\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!publishResponse.id) {\n      throw new Error('Failed to publish Instagram media');\n    }\n    \n    return { \n      id: publishResponse.id, \n      url: `https://instagram.com/p/${publishResponse.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      const status = error.response.status;\n      const data = error.response.data;\n      throw new Error(`Instagram API error (${status}): ${JSON.stringify(data)}`);\n    }\n    throw new Error(`Instagram error: ${error.message}`);\n  }\n}\n\nasync function publishToLinkedIn(content, mediaUrls, credentials) {\n  try {\n    console.log(`📎 LinkedIn: Getting user profile...`);\n    \n    // Get LinkedIn person ID\n    const profileResponse = await $http.request({\n      method: 'GET',\n      url: 'https://api.linkedin.com/v2/people/(id:me)',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!profileResponse.id) {\n      throw new Error('Failed to get LinkedIn profile ID');\n    }\n    \n    const postData = {\n      author: `urn:li:person:${profileResponse.id}`,\n      lifecycleState: 'PUBLISHED',\n      specificContent: {\n        'com.linkedin.ugc.ShareContent': {\n          shareCommentary: {\n            text: content\n          },\n          shareMediaCategory: mediaUrls && mediaUrls.length > 0 ? 'ARTICLE' : 'NONE'\n        }\n      },\n      visibility: {\n        'com.linkedin.ugc.MemberNetworkVisibility': 'PUBLIC'\n      }\n    };\n    \n    // Add media if present\n    if (mediaUrls && mediaUrls.length > 0) {\n      console.log(`📎 LinkedIn: Adding media reference`);\n      postData.specificContent['com.linkedin.ugc.ShareContent'].media = [{\n        status: 'READY',\n        originalUrl: mediaUrls[0]\n      }];\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://api.linkedin.com/v2/ugcPosts',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      body: postData,\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!response.id) {\n      throw new Error('Invalid response from LinkedIn API: missing post ID');\n    }\n    \n    return { \n      id: response.id, \n      url: `https://linkedin.com/feed/update/${response.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      const status = error.response.status;\n      const data = error.response.data;\n      throw new Error(`LinkedIn API error (${status}): ${JSON.stringify(data)}`);\n    }\n    throw new Error(`LinkedIn error: ${error.message}`);\n  }\n}\n\nasync function publishToReddit(content, mediaUrls, credentials) {\n  try {\n    // Note: Subreddit should be configurable per user\n    const subreddit = 'test'; // TODO: Make this dynamic\n    \n    const title = content.length > 100 ? content.substring(0, 97) + '...' : content;\n    \n    const postData = {\n      api_type: 'json',\n      kind: mediaUrls && mediaUrls.length > 0 ? 'link' : 'self',\n      sr: subreddit,\n      title: title,\n      text: content\n    };\n    \n    if (mediaUrls && mediaUrls.length > 0) {\n      console.log(`📎 Reddit: Posting as link with media`);\n      postData.url = mediaUrls[0];\n      delete postData.text;\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://oauth.reddit.com/api/submit',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'User-Agent': 'SocialMediaScheduler/1.0 by YourApp'\n      },\n      body: new URLSearchParams(postData),\n      timeout: REQUEST_TIMEOUT\n    });\n    \n    if (!response.json || !response.json.data || !response.json.data.id) {\n      throw new Error('Invalid response from Reddit API: missing post data');\n    }\n    \n    return { \n      id: response.json.data.id, \n      url: response.json.data.url \n    };\n  } catch (error) {\n    if (error.response) {\n      const status = error.response.status;\n      const data = error.response.data;\n      throw new Error(`Reddit API error (${status}): ${JSON.stringify(data)}`);\n    }\n    throw new Error(`Reddit error: ${error.message}`);\n  }\n}\n\n// Calculate final status\nconst finalStatus = failureCount === 0 ? 'completed' : \n                   successCount === 0 ? 'failed' : 'partial';\n\nconst errorMessage = failureCount > 0 ? \n  results.filter(r => !r.success).map(r => `${r.platform}: ${r.error}`).join('; ') : null;\n\n// Return comprehensive results\nconst summary = {\n  queueId,\n  postId,\n  userId,\n  results,\n  platformPostIds,\n  successCount,\n  failureCount,\n  totalPlatforms: platforms.length,\n  status: finalStatus,\n  errorMessage,\n  timestamp: new Date().toISOString(),\n  executionId: `${$workflow.id}-${$execution.id}`\n};\n\nconsole.log(`📊 Publishing Summary:`);\nconsole.log(`   Success: ${successCount}/${platforms.length} platforms`);\nconsole.log(`   Status: ${finalStatus}`);\nif (errorMessage) {\n  console.log(`   Errors: ${errorMessage}`);\n}\n\nreturn [summary];"
      },
      "id": "publish-platforms",
      "name": "Publish to Social Media Platforms",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 180],
      "notes": "Publishes content to all specified social media platforms with retry logic"
    },
    {
      "parameters": {
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/rest/v1/rpc/update_scheduled_post_status",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "apikey",
              "value": "={{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $credentials.supabaseApi.serviceKey }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"queue_id_param\": \"{{ $json.queueId }}\",\n  \"new_status\": \"{{ $json.status }}\",\n  \"execution_id_param\": \"{{ $json.executionId }}\",\n  \"error_message_param\": {{ $json.errorMessage ? `\"${$json.errorMessage.replace(/\"/g, '\\\\\"')}\"` : null }},\n  \"platform_post_ids_param\": {{ JSON.stringify($json.platformPostIds) }}\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "update-final-status",
      "name": "Update Final Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1560, 180],
      "credentials": {
        "supabaseApi": {
          "name": "Supabase API"
        }
      },
      "notes": "Updates database with final publishing results and platform post IDs"
    },
    {
      "parameters": {
        "jsCode": "// Log execution summary and send notifications\nconst data = $input.first().json;\n\nconsole.log('🎉 EXECUTION COMPLETED!');\nconsole.log('=' .repeat(50));\nconsole.log(`📝 Post ID: ${data.postId}`);\nconsole.log(`👤 User ID: ${data.userId}`);\nconsole.log(`📊 Results: ${data.successCount}/${data.totalPlatforms} platforms successful`);\nconsole.log(`📈 Status: ${data.status.toUpperCase()}`);\nconsole.log(`⏰ Timestamp: ${data.timestamp}`);\nconsole.log(`🔧 Execution: ${data.executionId}`);\n\nif (data.results && data.results.length > 0) {\n  console.log('\\n📱 Platform Results:');\n  data.results.forEach(result => {\n    if (result.success) {\n      console.log(`   ✅ ${result.platform}: ${result.url} (${result.attempts} attempts)`);\n    } else {\n      console.log(`   ❌ ${result.platform}: ${result.error} (${result.attempts} attempts)`);\n    }\n  });\n}\n\nif (data.errorMessage) {\n  console.log(`\\n🚨 Errors: ${data.errorMessage}`);\n}\n\nconsole.log('=' .repeat(50));\n\n// Prepare summary for potential webhook/notification\nconst executionSummary = {\n  postId: data.postId,\n  userId: data.userId,\n  status: data.status,\n  successCount: data.successCount,\n  failureCount: data.failureCount,\n  totalPlatforms: data.totalPlatforms,\n  platformPostIds: data.platformPostIds,\n  errorMessage: data.errorMessage,\n  timestamp: data.timestamp,\n  executionId: data.executionId,\n  results: data.results\n};\n\nreturn [{ \n  executionSummary,\n  success: data.status === 'completed',\n  hasErrors: data.failureCount > 0,\n  message: data.status === 'completed' ? \n    `Successfully published to ${data.successCount} platforms` :\n    data.status === 'failed' ?\n    `Failed to publish to all platforms` :\n    `Published to ${data.successCount}/${data.totalPlatforms} platforms`\n}];"
      },
      "id": "log-summary",
      "name": "Log Execution Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 180],
      "notes": "Logs comprehensive execution summary and prepares notification data"
    }
  ],
  "connections": {
    "Every Minute Trigger": {
      "main": [
        [
          {
            "node": "Fetch Pending Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Pending Posts": {
      "main": [
        [
          {
            "node": "Has Posts to Process?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Posts to Process?": {
      "main": [
        [
          {
            "node": "Process and Validate Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process and Validate Posts": {
      "main": [
        [
          {
            "node": "Mark as Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Processing": {
      "main": [
        [
          {
            "node": "Publish to Social Media Platforms",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish to Social Media Platforms": {
      "main": [
        [
          {
            "node": "Update Final Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Final Status": {
      "main": [
        [
          {
            "node": "Log Execution Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["production", "social-media", "scheduling", "complete"],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "4.0"
}
