{
  "name": "Enhanced Social Media Scheduled Posting",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "schedule-trigger",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM get_pending_scheduled_posts()",
        "options": {}
      },
      "id": "fetch-pending-posts",
      "name": "Fetch Pending Posts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [460, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-posts",
              "leftValue": "={{ $input.all().length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-has-posts",
      "name": "Check Has Posts",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Split posts for individual processing\nconst posts = $input.all();\nconst results = [];\n\nfor (const post of posts) {\n  results.push({\n    queueId: post.json.queue_id,\n    postId: post.json.post_id,\n    userId: post.json.user_id,\n    content: post.json.content,\n    platforms: post.json.platforms || [],\n    mediaUrls: post.json.media_urls || [],\n    scheduledFor: post.json.scheduled_for,\n    oauthCredentials: post.json.oauth_credentials || {}\n  });\n}\n\nreturn results.map(item => ({ json: item }));"
      },
      "id": "split-posts",
      "name": "Split Posts for Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 180]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT update_scheduled_post_status('{{ $json.queueId }}', 'processing', '{{ $workflow.id }}-{{ $execution.id }}')",
        "options": {}
      },
      "id": "mark-processing",
      "name": "Mark as Processing",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1120, 180],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced Social Media Publishing with Comprehensive Platform Support\nconst postData = $input.first().json;\nconst platforms = postData.platforms || [];\nconst content = postData.content || '';\nconst mediaUrls = postData.mediaUrls || [];\nconst oauthCredentials = postData.oauthCredentials || {};\nconst queueId = postData.queueId;\nconst postId = postData.postId;\nconst userId = postData.userId;\n\nconsole.log(`üöÄ Processing post ${postId} for user ${userId}`);\nconsole.log(`üìù Content: ${content.substring(0, 100)}...`);\nconsole.log(`üì± Platforms: ${platforms.join(', ')}`);\nconsole.log(`üñºÔ∏è Media URLs: ${mediaUrls.length} files`);\n\nconst results = [];\nconst platformPostIds = {};\nlet successCount = 0;\nlet failureCount = 0;\n\n// Process each platform sequentially\nfor (const platform of platforms) {\n  try {\n    console.log(`üì§ Publishing to ${platform}...`);\n    \n    const credentials = oauthCredentials[platform];\n    if (!credentials || !credentials.access_token) {\n      throw new Error(`No OAuth credentials found for ${platform}`);\n    }\n\n    // Check token expiration\n    if (credentials.expires_at) {\n      const expiryDate = new Date(credentials.expires_at);\n      const now = new Date();\n      if (expiryDate <= now) {\n        throw new Error(`Access token expired for ${platform} (expired: ${expiryDate.toISOString()})`);\n      }\n    }\n\n    let postResult;\n    switch (platform.toLowerCase()) {\n      case 'twitter':\n        postResult = await publishToTwitter(content, mediaUrls, credentials);\n        break;\n      case 'facebook':\n        postResult = await publishToFacebook(content, mediaUrls, credentials);\n        break;\n      case 'instagram':\n        postResult = await publishToInstagram(content, mediaUrls, credentials);\n        break;\n      case 'linkedin':\n        postResult = await publishToLinkedIn(content, mediaUrls, credentials, userId);\n        break;\n      case 'reddit':\n        postResult = await publishToReddit(content, mediaUrls, credentials);\n        break;\n      default:\n        throw new Error(`Unsupported platform: ${platform}`);\n    }\n\n    results.push({\n      platform,\n      success: true,\n      postId: postResult.id,\n      url: postResult.url,\n      message: `Successfully published to ${platform}`,\n      timestamp: new Date().toISOString()\n    });\n    \n    platformPostIds[platform] = postResult.id;\n    successCount++;\n    console.log(`‚úÖ ${platform}: ${postResult.url}`);\n\n  } catch (error) {\n    console.error(`‚ùå ${platform} failed:`, error.message);\n    results.push({\n      platform,\n      success: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    });\n    failureCount++;\n  }\n  \n  // Rate limiting delay\n  if (platforms.indexOf(platform) < platforms.length - 1) {\n    console.log('‚è≥ Waiting 2 seconds before next platform...');\n    await new Promise(resolve => setTimeout(resolve, 2000));\n  }\n}\n\n// Platform-specific publishing functions\nasync function publishToTwitter(content, mediaUrls, credentials) {\n  try {\n    // Truncate content to Twitter's limit\n    const tweetText = content.length > 280 ? content.substring(0, 277) + '...' : content;\n    \n    const tweetData = { text: tweetText };\n    \n    // Handle media (simplified - in production, implement proper media upload)\n    if (mediaUrls && mediaUrls.length > 0) {\n      console.log(`üìé Twitter: ${mediaUrls.length} media files detected (upload not implemented)`);\n      // TODO: Implement Twitter media upload\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://api.twitter.com/2/tweets',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      body: tweetData\n    });\n    \n    if (!response.data || !response.data.id) {\n      throw new Error('Invalid response from Twitter API');\n    }\n    \n    return { \n      id: response.data.id, \n      url: `https://twitter.com/user/status/${response.data.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`Twitter API error (${error.response.status}): ${JSON.stringify(error.response.data)}`);\n    }\n    throw new Error(`Twitter error: ${error.message}`);\n  }\n}\n\nasync function publishToFacebook(content, mediaUrls, credentials) {\n  try {\n    const postData = {\n      message: content,\n      access_token: credentials.access_token\n    };\n    \n    // Handle media as link preview\n    if (mediaUrls && mediaUrls.length > 0) {\n      console.log(`üìé Facebook: Adding first media as link preview`);\n      postData.link = mediaUrls[0];\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://graph.facebook.com/me/feed',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: postData\n    });\n    \n    if (!response.id) {\n      throw new Error('Invalid response from Facebook API');\n    }\n    \n    return { \n      id: response.id, \n      url: `https://facebook.com/${response.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`Facebook API error (${error.response.status}): ${JSON.stringify(error.response.data)}`);\n    }\n    throw new Error(`Facebook error: ${error.message}`);\n  }\n}\n\nasync function publishToInstagram(content, mediaUrls, credentials) {\n  try {\n    if (!mediaUrls || mediaUrls.length === 0) {\n      throw new Error('Instagram posts require at least one media file');\n    }\n    \n    // Step 1: Create media container\n    const mediaData = {\n      image_url: mediaUrls[0],\n      caption: content,\n      access_token: credentials.access_token\n    };\n    \n    const mediaResponse = await $http.request({\n      method: 'POST',\n      url: 'https://graph.instagram.com/me/media',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: mediaData\n    });\n    \n    if (!mediaResponse.id) {\n      throw new Error('Failed to create Instagram media container');\n    }\n    \n    // Step 2: Publish media\n    const publishData = {\n      creation_id: mediaResponse.id,\n      access_token: credentials.access_token\n    };\n    \n    const publishResponse = await $http.request({\n      method: 'POST',\n      url: 'https://graph.instagram.com/me/media_publish',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: publishData\n    });\n    \n    if (!publishResponse.id) {\n      throw new Error('Failed to publish Instagram media');\n    }\n    \n    return { \n      id: publishResponse.id, \n      url: `https://instagram.com/p/${publishResponse.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`Instagram API error (${error.response.status}): ${JSON.stringify(error.response.data)}`);\n    }\n    throw new Error(`Instagram error: ${error.message}`);\n  }\n}\n\nasync function publishToLinkedIn(content, mediaUrls, credentials, userId) {\n  try {\n    // Get LinkedIn person ID from user profile\n    const profileResponse = await $http.request({\n      method: 'GET',\n      url: 'https://api.linkedin.com/v2/people/(id:me)',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    const personId = profileResponse.id;\n    \n    const postData = {\n      author: `urn:li:person:${personId}`,\n      lifecycleState: 'PUBLISHED',\n      specificContent: {\n        'com.linkedin.ugc.ShareContent': {\n          shareCommentary: {\n            text: content\n          },\n          shareMediaCategory: mediaUrls && mediaUrls.length > 0 ? 'ARTICLE' : 'NONE'\n        }\n      },\n      visibility: {\n        'com.linkedin.ugc.MemberNetworkVisibility': 'PUBLIC'\n      }\n    };\n    \n    // Add media if present\n    if (mediaUrls && mediaUrls.length > 0) {\n      postData.specificContent['com.linkedin.ugc.ShareContent'].media = [{\n        status: 'READY',\n        originalUrl: mediaUrls[0]\n      }];\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://api.linkedin.com/v2/ugcPosts',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/json'\n      },\n      body: postData\n    });\n    \n    if (!response.id) {\n      throw new Error('Invalid response from LinkedIn API');\n    }\n    \n    return { \n      id: response.id, \n      url: `https://linkedin.com/feed/update/${response.id}` \n    };\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`LinkedIn API error (${error.response.status}): ${JSON.stringify(error.response.data)}`);\n    }\n    throw new Error(`LinkedIn error: ${error.message}`);\n  }\n}\n\nasync function publishToReddit(content, mediaUrls, credentials) {\n  try {\n    // Reddit requires subreddit - this should be configurable\n    const subreddit = 'test'; // TODO: Make this dynamic based on user preferences\n    \n    const postData = {\n      api_type: 'json',\n      kind: mediaUrls && mediaUrls.length > 0 ? 'link' : 'self',\n      sr: subreddit,\n      title: content.length > 100 ? content.substring(0, 97) + '...' : content,\n      text: content\n    };\n    \n    if (mediaUrls && mediaUrls.length > 0) {\n      postData.url = mediaUrls[0];\n      delete postData.text;\n    }\n    \n    const response = await $http.request({\n      method: 'POST',\n      url: 'https://oauth.reddit.com/api/submit',\n      headers: {\n        'Authorization': `Bearer ${credentials.access_token}`,\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'User-Agent': 'SocialMediaScheduler/1.0'\n      },\n      body: new URLSearchParams(postData)\n    });\n    \n    if (!response.json || !response.json.data || !response.json.data.id) {\n      throw new Error('Invalid response from Reddit API');\n    }\n    \n    return { \n      id: response.json.data.id, \n      url: response.json.data.url \n    };\n  } catch (error) {\n    if (error.response) {\n      throw new Error(`Reddit API error (${error.response.status}): ${JSON.stringify(error.response.data)}`);\n    }\n    throw new Error(`Reddit error: ${error.message}`);\n  }\n}\n\n// Return comprehensive results\nconst summary = {\n  queueId,\n  postId,\n  results,\n  platformPostIds,\n  successCount,\n  failureCount,\n  totalPlatforms: platforms.length,\n  status: failureCount === 0 ? 'completed' : (successCount === 0 ? 'failed' : 'partial'),\n  errorMessage: failureCount > 0 ? \n    `Failed platforms: ${results.filter(r => !r.success).map(r => `${r.platform} (${r.error})`).join(', ')}` : \n    null,\n  timestamp: new Date().toISOString()\n};\n\nconsole.log(`üìä Summary: ${successCount}/${platforms.length} platforms successful`);\nif (summary.errorMessage) {\n  console.error(`‚ùå Errors: ${summary.errorMessage}`);\n}\n\nreturn [summary];"
      },
      "id": "publish-to-platforms",
      "name": "Enhanced Platform Publisher",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT update_scheduled_post_status('{{ $json.queueId }}', '{{ $json.status }}', '{{ $workflow.id }}-{{ $execution.id }}', {{ $json.errorMessage ? `'${$json.errorMessage.replace(/'/g, \"''\")}'` : 'NULL' }}, '{{ JSON.stringify($json.platformPostIds) }}'::jsonb)",
        "options": {}
      },
      "id": "update-final-status",
      "name": "Update Final Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1560, 180],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log execution summary\nconst data = $input.first().json;\n\nconsole.log('üéâ Execution completed!');\nconsole.log(`üìù Post ID: ${data.postId}`);\nconsole.log(`‚úÖ Success: ${data.successCount}`);\nconsole.log(`‚ùå Failures: ${data.failureCount}`);\nconsole.log(`üìä Status: ${data.status}`);\n\nif (data.results) {\n  data.results.forEach(result => {\n    if (result.success) {\n      console.log(`‚úÖ ${result.platform}: ${result.url}`);\n    } else {\n      console.log(`‚ùå ${result.platform}: ${result.error}`);\n    }\n  });\n}\n\nreturn [{\n  executionSummary: {\n    postId: data.postId,\n    status: data.status,\n    successCount: data.successCount,\n    failureCount: data.failureCount,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-summary",
      "name": "Log Execution Summary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 180]
    }
  ],
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Pending Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Pending Posts": {
      "main": [
        [
          {
            "node": "Check Has Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Has Posts": {
      "main": [
        [
          {
            "node": "Split Posts for Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Posts for Processing": {
      "main": [
        [
          {
            "node": "Mark as Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mark as Processing": {
      "main": [
        [
          {
            "node": "Enhanced Platform Publisher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Platform Publisher": {
      "main": [
        [
          {
            "node": "Update Final Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Final Status": {
      "main": [
        [
          {
            "node": "Log Execution Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["social-media", "scheduling", "automation"],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "2.0"
}
