{
  "name": "Social Media Scheduler - Complete Flow",
  "nodes": [
    {
      "parameters": {
        "path": "schedule-post",
        "method": "POST",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "id": "webhook_trigger",
      "name": "Schedule Post Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [140, 380]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  oc.access_token,\n  oc.refresh_token,\n  oc.expires_at,\n  oc.platform,\n  oc.user_id,\n  sp.id as post_id,\n  sp.content,\n  sp.title,\n  sp.scheduled_for,\n  sp.platform_specific_data\nFROM oauth_credentials oc\nJOIN scheduled_posts sp ON oc.user_id = sp.user_id\nWHERE oc.user_id = '{{ $json.body.userId }}' \nAND oc.platform = '{{ $json.body.platform }}' \nAND sp.id = '{{ $json.body.postId }}'\nAND sp.status = 'scheduled';"
      },
      "id": "fetch_credentials_and_post",
      "name": "Fetch OAuth Credentials & Post Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [360, 380],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "dateTime": [
            {
              "value1": "={{ DateTime.now().toISO() }}",
              "value2": "={{ $json.expires_at }}",
              "operation": "after"
            }
          ]
        }
      },
      "id": "check_token_expiry",
      "name": "Check Token Expiry",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [580, 380]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.platform === 'reddit' ? 'https://www.reddit.com/api/v1/access_token' : $json.platform === 'twitter' ? 'https://api.twitter.com/2/oauth2/token' : 'https://oauth2.googleapis.com/token' }}",
        "options": {
          "headers": {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": "={{ $json.platform === 'reddit' ? 'Basic ' + $base64Encode($env.REDDIT_CLIENT_ID + ':' + $env.REDDIT_CLIENT_SECRET) : 'Bearer ' + $env.TWITTER_BEARER_TOKEN }}"
          },
          "body": {
            "bodyType": "form",
            "values": {
              "grant_type": "refresh_token",
              "refresh_token": "={{ $json.refresh_token }}"
            }
          }
        }
      },
      "id": "refresh_access_token",
      "name": "Refresh Access Token",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [720, 280]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE oauth_credentials \nSET access_token = '{{ $json.access_token }}', \n    expires_at = '{{ DateTime.now().plus({seconds: $json.expires_in}).toISO() }}',\n    updated_at = NOW()\nWHERE user_id = '{{ $node[\"Fetch OAuth Credentials & Post Data\"].json.user_id }}' \nAND platform = '{{ $node[\"Fetch OAuth Credentials & Post Data\"].json.platform }}';"
      },
      "id": "update_refreshed_token",
      "name": "Update Refreshed Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [940, 280],
      "credentials": {
        "postgres": {
          "id": "supabase_postgres",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Merge refreshed token with original post data\nconst originalData = $node['Fetch OAuth Credentials & Post Data'].json;\nconst refreshedToken = $json.access_token;\n\nreturn {\n  ...originalData,\n  access_token: refreshedToken,\n  token_refreshed: true\n};"
      },
      "id": "merge_refreshed_data",
      "name": "Merge Refreshed Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1160, 280]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll"
      },
      "id": "merge_token_paths",
      "name": "Merge Token Paths",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [1160, 480]
    },
    {
      "parameters": {
        "time": "={{ $json.scheduled_for }}"
      },
      "id": "wait_for_scheduled_time",
      "name": "Wait for Scheduled Time",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1380, 480]
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.platform }}",
        "rules": {
          "rules": [
            {
              "value2": "reddit",
              "operation": "equal"
            },
            {
              "value2": "twitter", 
              "operation": "equal"
            },
            {
              "value2": "linkedin",
              "operation": "equal"
            },
            {
              "value2": "facebook",
              "operation": "equal"
            },
            {
              "value2": "instagram",
              "operation": "equal"
            }
          ]
        }
      },
      "id": "route_by_platform",
      "name": "Route by Platform",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [1600, 480]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://oauth.reddit.com/api/submit",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "User-Agent": "ScribeScheduler/1.0"
          },
          "body": {
            "bodyType": "form",
            "values": {
              "api_type": "json",
              "kind": "={{ JSON.parse($json.platform_specific_data || '{}').post_type || 'self' }}",
              "sr": "={{ JSON.parse($json.platform_specific_data || '{}').subreddit }}",
              "title": "={{ $json.title }}",
              "text": "={{ $json.content }}",
              "url": "={{ JSON.parse($json.platform_specific_data || '{}').url || '' }}",
              "nsfw": "={{ JSON.parse($json.platform_specific_data || '{}').nsfw || false }}",
              "spoiler": "={{ JSON.parse($json.platform_specific_data || '{}').spoiler || false }}"
            }
          }
        }
      },
      "id": "post_to_reddit",
      "name": "Post to Reddit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1820, 280]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "text": "={{ $json.content }}"
            }
          }
        }
      },
      "id": "post_to_twitter",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1820, 380]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $json.access_token }}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "author": "{{ JSON.parse($json.platform_specific_data || '{}').author_urn }}",
              "lifecycleState": "PUBLISHED",
              "specificContent": {
                "com.linkedin.ugc.ShareContent": {
                  "shareCommentary": {
                    "text": "={{ $json.content }}"
                  },
                  "shareMediaCategory": "NONE"
                }
              },
              "visibility": {
                "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC"
              }
            }
          }
        }
      },
      "id": "post_to_linkedin",
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1820, 480]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://graph.facebook.com/v18.0/{{ JSON.parse($json.platform_specific_data || '{}').page_id }}/feed",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "message": "={{ $json.content }}",
              "access_token": "={{ $json.access_token }}"
            }
          }
        }
      },
      "id": "post_to_facebook",
      "name": "Post to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1820, 580]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://graph.facebook.com/v18.0/{{ JSON.parse($json.platform_specific_data || '{}').instagram_account_id }}/media",
        "options": {
          "headers": {
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": {
              "image_url": "={{ JSON.parse($json.platform_specific_data || '{}').image_url }}",
              "caption": "={{ $json.content }}",
              "access_token": "={{ $json.access_token }}",
              "media_type": "IMAGE"
            }
          }
        }
      },
      "id": "post_to_instagram",
      "name": "Post to Instagram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1820, 680]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineAll"
      },
      "id": "merge_platform_responses",
      "name": "Merge Platform Responses",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2,
      "position": [2040, 480]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE scheduled_posts \nSET status = CASE \n  WHEN '{{ $json.error }}' IS NULL OR '{{ $json.error }}' = '' THEN 'posted'\n  ELSE 'failed'\nEND,\nposted_at = CASE \n  WHEN '{{ $json.error }}' IS NULL OR '{{ $json.error }}' = '' THEN NOW()\n  ELSE NULL\nEND,\nplatform_post_id = COALESCE('{{ $json.id }}', '{{ $json.data.id }}'),\nerror_message = '{{ $json.error }}',\nupdated_at = NOW()\nWHERE id = '{{ $node[\"Fetch OAuth Credentials & Post Data\"].json.post_id }}';"
      },
      "id": "update_post_status",
      "name": "Update Post Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2260, 480],
      "credentials": {
        "postgres": {
          "id": "supabase_postgres",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Send notification to your frontend via Supabase Realtime\nconst postData = $node['Fetch OAuth Credentials & Post Data'].json;\nconst result = $json;\n\nreturn {\n  type: 'post_completed',\n  post_id: postData.post_id,\n  user_id: postData.user_id,\n  platform: postData.platform,\n  status: result.error ? 'failed' : 'posted',\n  error: result.error || null,\n  platform_post_id: result.id || result.data?.id || null,\n  posted_at: new Date().toISOString()\n};"
      },
      "id": "prepare_notification",
      "name": "Prepare Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2480, 480]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://eqiuukwwpdiyncahrdny.supabase.co/functions/v1/notify-post-completion",
        "options": {
          "headers": {
            "Authorization": "Bearer {{ $env.SUPABASE_ANON_KEY }}",
            "Content-Type": "application/json"
          },
          "body": {
            "bodyType": "json",
            "values": "={{ $json }}"
          }
        }
      },
      "id": "send_notification",
      "name": "Send Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2700, 480]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { success: true, message: 'Post scheduled and processed', post_id: $node['Fetch OAuth Credentials & Post Data'].json.post_id, status: $json.status } }}"
      },
      "id": "webhook_response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2920, 480]
    }
  ],
  "connections": {
    "webhook_trigger": {
      "main": [
        [
          {
            "node": "fetch_credentials_and_post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch_credentials_and_post": {
      "main": [
        [
          {
            "node": "check_token_expiry",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check_token_expiry": {
      "main": [
        [
          {
            "node": "refresh_access_token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "merge_token_paths",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "refresh_access_token": {
      "main": [
        [
          {
            "node": "update_refreshed_token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_refreshed_token": {
      "main": [
        [
          {
            "node": "merge_refreshed_data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "merge_refreshed_data": {
      "main": [
        [
          {
            "node": "merge_token_paths",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "merge_token_paths": {
      "main": [
        [
          {
            "node": "wait_for_scheduled_time",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait_for_scheduled_time": {
      "main": [
        [
          {
            "node": "route_by_platform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "route_by_platform": {
      "main": [
        [
          {
            "node": "post_to_reddit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_twitter",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_linkedin",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_facebook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "post_to_instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post_to_reddit": {
      "main": [
        [
          {
            "node": "merge_platform_responses",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "post_to_twitter": {
      "main": [
        [
          {
            "node": "merge_platform_responses",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "post_to_linkedin": {
      "main": [
        [
          {
            "node": "merge_platform_responses",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "post_to_facebook": {
      "main": [
        [
          {
            "node": "merge_platform_responses",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "post_to_instagram": {
      "main": [
        [
          {
            "node": "merge_platform_responses",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "merge_platform_responses": {
      "main": [
        [
          {
            "node": "update_post_status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update_post_status": {
      "main": [
        [
          {
            "node": "prepare_notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare_notification": {
      "main": [
        [
          {
            "node": "send_notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "send_notification": {
      "main": [
        [
          {
            "node": "webhook_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "tags": []
}
