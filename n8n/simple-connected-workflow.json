{
  "name": "Social Media Scheduler - SIMPLE VERSION",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "schedule-post",
        "options": {
          "rawBody": true
        }
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 300],
      "webhookId": "schedule-post"
    },
    {
      "parameters": {
        "jsCode": "// Simple webhook processor with better error handling\nconst webhookData = $input.first().json;\nlet body = {};\n\n// Handle different body formats\nif (typeof webhookData.body === 'string') {\n  try {\n    body = JSON.parse(webhookData.body);\n  } catch (e) {\n    console.error('‚ùå JSON parse error:', e.message);\n    throw new Error('Invalid JSON in request body');\n  }\n} else if (typeof webhookData.body === 'object') {\n  body = webhookData.body || {};\n} else {\n  console.log('üì® Raw webhook data:', JSON.stringify(webhookData, null, 2));\n  // Try to extract from different possible locations\n  body = webhookData.query || webhookData.params || {};\n}\n\nconsole.log('üì® Processed body:', JSON.stringify(body, null, 2));\n\n// Validate required fields\nif (!body.user_id || !body.content) {\n  const errorMsg = `Missing required fields. Received: ${JSON.stringify(body)}`;\n  console.error('‚ùå', errorMsg);\n  throw new Error(errorMsg);\n}\n\n// Extract platform\nconst platform = body.platform || 'twitter';\nlet platforms = [];\nif (body.platforms && Array.isArray(body.platforms)) {\n  platforms = body.platforms;\n} else if (body.platform) {\n  platforms = [body.platform];\n} else {\n  platforms = ['twitter']; // default\n}\n\n// Process scheduled time\nlet scheduledFor = new Date();\nif (body.scheduled_for) {\n  scheduledFor = new Date(body.scheduled_for);\n  console.log('üìÖ Scheduled for:', scheduledFor.toISOString());\n} else {\n  scheduledFor = new Date(Date.now() + 60000); // 1 minute from now\n  console.log('‚ö° No schedule time, posting in 1 minute');\n}\n\nconst processedData = {\n  post_id: body.post_id || `post-${Date.now()}`,\n  user_id: body.user_id,\n  content: body.content,\n  platforms: platforms,\n  media_urls: body.media_urls || [],\n  scheduled_for: scheduledFor.toISOString()\n};\n\nconsole.log('‚úÖ Processed data:', JSON.stringify(processedData, null, 2));\nreturn { json: processedData };"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO scheduled_posts_queue (post_id, user_id, content, platforms, media_urls, scheduled_for, status, created_at) VALUES ('{{ $json.post_id }}', '{{ $json.user_id }}', '{{ $json.content }}', '{{ JSON.stringify($json.platforms) }}', '{{ JSON.stringify($json.media_urls) }}', '{{ $json.scheduled_for }}', 'pending', NOW()) ON CONFLICT (post_id) DO UPDATE SET content = '{{ $json.content }}', platforms = '{{ JSON.stringify($json.platforms) }}', media_urls = '{{ JSON.stringify($json.media_urls) }}', scheduled_for = '{{ $json.scheduled_for }}', status = 'pending', updated_at = NOW()",
        "options": {}
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Save to Database",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [700, 300],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Post scheduled successfully\", \"post_id\": $json.post_id, \"scheduled_for\": $json.scheduled_for, \"platforms\": $json.platforms } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 1
            }
          ]
        }
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Auto Post Timer",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [300, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT spq.*, json_object_agg(oc.platform, json_build_object('access_token', oc.access_token, 'refresh_token', oc.refresh_token, 'token_type', oc.token_type, 'expires_at', oc.expires_at)) as oauth_credentials FROM scheduled_posts_queue spq LEFT JOIN oauth_credentials oc ON spq.user_id = oc.user_id WHERE spq.status = 'pending' AND spq.scheduled_for <= NOW() GROUP BY spq.id, spq.post_id, spq.user_id, spq.content, spq.platforms, spq.media_urls, spq.scheduled_for, spq.status, spq.created_at, spq.updated_at LIMIT 10",
        "options": {}
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Get Pending Posts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [500, 500],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// REAL social media posting using OAuth credentials from database\nconst posts = $input.all();\n\nif (posts.length === 0) {\n  console.log('üì≠ No pending posts to process');\n  return [];\n}\n\nconsole.log(`üìã Processing ${posts.length} pending posts for REAL posting`);\n\nconst results = [];\n\nfor (const post of posts) {\n  try {\n    const postData = post.json;\n    const oauthCredentials = postData.oauth_credentials || {};\n    \n    // Safely parse platforms\n    let platforms = [];\n    if (typeof postData.platforms === 'string') {\n      try {\n        platforms = JSON.parse(postData.platforms);\n      } catch (e) {\n        console.error('‚ùå Error parsing platforms JSON:', e.message);\n        platforms = ['twitter']; // fallback\n      }\n    } else if (Array.isArray(postData.platforms)) {\n      platforms = postData.platforms;\n    } else {\n      platforms = ['twitter']; // fallback\n    }\n    \n    console.log(`üöÄ REAL posting: \"${postData.content.substring(0, 50)}...\" to ${platforms.join(', ')}`);\n    console.log('üîë Available OAuth credentials:', Object.keys(oauthCredentials));\n    \n    const platformResults = {};\n    let successCount = 0;\n    let failureCount = 0;\n    \n    for (const platform of platforms) {\n      try {\n        const credentials = oauthCredentials[platform];\n        if (!credentials || !credentials.access_token) {\n          throw new Error(`No OAuth credentials found for ${platform}`);\n        }\n        \n        console.log(`üì§ Posting to ${platform} with real API...`);\n        \n        let postResult;\n        switch (platform.toLowerCase()) {\n          case 'twitter':\n            postResult = await postToTwitter(postData.content, postData.media_urls || [], credentials);\n            break;\n          case 'facebook':\n            postResult = await postToFacebook(postData.content, postData.media_urls || [], credentials);\n            break;\n          case 'linkedin':\n            postResult = await postToLinkedIn(postData.content, postData.media_urls || [], credentials);\n            break;\n          case 'instagram':\n            postResult = await postToInstagram(postData.content, postData.media_urls || [], credentials);\n            break;\n          case 'reddit':\n            postResult = await postToReddit(postData.content, postData.media_urls || [], credentials);\n            break;\n          default:\n            throw new Error(`Unsupported platform: ${platform}`);\n        }\n        \n        platformResults[platform] = postResult.id;\n        successCount++;\n        console.log(`‚úÖ REAL ${platform} post created: ${postResult.url}`);\n        \n      } catch (error) {\n        console.error(`‚ùå Failed to post to ${platform}: ${error.message}`);\n        platformResults[platform] = `error: ${error.message}`;\n        failureCount++;\n      }\n    }\n    \n    const finalStatus = failureCount === 0 ? 'completed' : \n                       successCount === 0 ? 'failed' : 'partial';\n    \n    results.push({\n      id: postData.id,\n      post_id: postData.post_id,\n      status: finalStatus,\n      platform_post_ids: JSON.stringify(platformResults),\n      completed_at: new Date().toISOString(),\n      platforms_count: platforms.length,\n      success_count: successCount,\n      failure_count: failureCount\n    });\n    \n  } catch (error) {\n    console.error('‚ùå Error processing post:', error.message);\n    results.push({\n      id: post.json.id,\n      post_id: post.json.post_id,\n      status: 'failed',\n      platform_post_ids: '{}',\n      completed_at: new Date().toISOString(),\n      error_message: error.message\n    });\n  }\n}\n\n// REAL API FUNCTIONS\nasync function postToTwitter(content, mediaUrls, credentials) {\n  console.log('üê¶ Posting to Twitter API v2...');\n  \n  const response = await fetch('https://api.twitter.com/2/tweets', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${credentials.access_token}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      text: content\n    })\n  });\n  \n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`Twitter API error: ${response.status} - ${error}`);\n  }\n  \n  const result = await response.json();\n  return {\n    id: result.data.id,\n    url: `https://twitter.com/user/status/${result.data.id}`\n  };\n}\n\nasync function postToFacebook(content, mediaUrls, credentials) {\n  console.log('ÔøΩ Posting to Facebook Graph API...');\n  \n  // Note: You'll need to get the page ID from your app\n  const pageId = 'YOUR_FACEBOOK_PAGE_ID'; // Replace with actual page ID\n  \n  const response = await fetch(`https://graph.facebook.com/v18.0/${pageId}/feed`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: content,\n      access_token: credentials.access_token\n    })\n  });\n  \n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`Facebook API error: ${response.status} - ${error}`);\n  }\n  \n  const result = await response.json();\n  return {\n    id: result.id,\n    url: `https://facebook.com/${result.id}`\n  };\n}\n\nasync function postToLinkedIn(content, mediaUrls, credentials) {\n  console.log('üíº Posting to LinkedIn API...');\n  \n  // Note: You'll need to get the person URN from your app\n  const personUrn = 'urn:li:person:YOUR_PERSON_ID'; // Replace with actual person URN\n  \n  const response = await fetch('https://api.linkedin.com/v2/ugcPosts', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${credentials.access_token}`,\n      'Content-Type': 'application/json',\n      'X-Restli-Protocol-Version': '2.0.0'\n    },\n    body: JSON.stringify({\n      author: personUrn,\n      lifecycleState: 'PUBLISHED',\n      specificContent: {\n        'com.linkedin.ugc.ShareContent': {\n          shareCommentary: {\n            text: content\n          },\n          shareMediaCategory: 'NONE'\n        }\n      },\n      visibility: {\n        'com.linkedin.ugc.MemberNetworkVisibility': 'PUBLIC'\n      }\n    })\n  });\n  \n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`LinkedIn API error: ${response.status} - ${error}`);\n  }\n  \n  const result = await response.json();\n  return {\n    id: result.id,\n    url: `https://linkedin.com/feed/update/${result.id}`\n  };\n}\n\nasync function postToInstagram(content, mediaUrls, credentials) {\n  console.log('üì∑ Posting to Instagram Basic Display API...');\n  \n  // Instagram requires media URLs for posts\n  if (!mediaUrls || mediaUrls.length === 0) {\n    throw new Error('Instagram posts require at least one media URL');\n  }\n  \n  // Note: Instagram posting is complex and requires media upload first\n  // This is a simplified version - you may need to implement media upload\n  throw new Error('Instagram posting requires media upload implementation');\n}\n\nasync function postToReddit(content, mediaUrls, credentials) {\n  console.log('ü§ñ Posting to Reddit API...');\n  \n  // Note: You'll need to specify the subreddit\n  const subreddit = 'test'; // Replace with actual subreddit\n  \n  const response = await fetch(`https://oauth.reddit.com/api/submit`, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${credentials.access_token}`,\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'User-Agent': 'SocialMediaScheduler/1.0'\n    },\n    body: new URLSearchParams({\n      api_type: 'json',\n      kind: 'self',\n      sr: subreddit,\n      title: content.substring(0, 100), // Reddit title limit\n      text: content\n    })\n  });\n  \n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`Reddit API error: ${response.status} - ${error}`);\n  }\n  \n  const result = await response.json();\n  if (result.json && result.json.errors && result.json.errors.length > 0) {\n    throw new Error(`Reddit API error: ${result.json.errors[0][1]}`);\n  }\n  \n  const postId = result.json.data.id;\n  return {\n    id: postId,\n    url: `https://reddit.com/r/${subreddit}/comments/${postId}`\n  };\n}\n\nconsole.log(`ÔøΩüìä Processed ${results.length} posts with REAL API calls`);\nreturn results.map(item => ({ json: item }));"
      },
      "id": "g7h8i9j0-k1l2-3456-ghij-789012345678",
      "name": "Auto Publish",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [700, 500]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE scheduled_posts_queue SET status = '{{ $json.status }}', platform_post_ids = '{{ $json.platform_post_ids }}', completed_at = '{{ $json.completed_at }}', updated_at = NOW() WHERE id = {{ $json.id }}",
        "options": {}
      },
      "id": "h8i9j0k1-l2m3-4567-hijk-890123456789",
      "name": "Update Status",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 500],
      "credentials": {
        "postgres": {
          "id": "supabase-connection",
          "name": "Supabase Database"
        }
      }
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Save to Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Database": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto Post Timer": {
      "main": [
        [
          {
            "node": "Get Pending Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Pending Posts": {
      "main": [
        [
          {
            "node": "Auto Publish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto Publish": {
      "main": [
        [
          {
            "node": "Update Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
