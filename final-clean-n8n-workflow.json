{
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Every 5 Minutes",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        -740,
        -60
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, user_id, content, platform, scheduled_time as scheduled_at, image_url, title, 'scheduled' as status FROM scheduled_posts WHERE scheduled_time <= NOW() AND posted = false ORDER BY scheduled_time ASC LIMIT 10;",
        "additionalFields": {}
      },
      "id": "get-scheduled-posts",
      "name": "Get Scheduled Posts",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -520,
        -60
      ],
      "credentials": {
        "postgres": {
          "id": "E7r1BJUUA005LCJY",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT access_token, refresh_token, platform, token_type, expires_at FROM oauth_credentials WHERE user_id = '{{$json[\"user_id\"]}}' AND platform = '{{$json[\"platform\"]}}' AND access_token IS NOT NULL ORDER BY updated_at DESC LIMIT 1;",
        "additionalFields": {}
      },
      "id": "get-oauth-token",
      "name": "Get OAuth Token",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        -300,
        -60
      ],
      "credentials": {
        "postgres": {
          "id": "E7r1BJUUA005LCJY",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Validate OAuth token and prepare for posting\nconst hasToken = item.json.access_token && item.json.access_token.length > 0;\n\n// Check if token is expired\nlet isExpired = false;\nif (item.json.expires_at) {\n  try {\n    const expiresAt = new Date(item.json.expires_at);\n    isExpired = expiresAt < new Date();\n  } catch (e) {\n    isExpired = true;\n  }\n}\n\n// Only proceed if we have a valid, non-expired token\nif (!hasToken || isExpired) {\n  // Skip this post - no valid token\n  return null;\n}\n\n// Token is valid, proceed with posting\nreturn item;"
      },
      "id": "validate-token",
      "name": "Validate Token",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -80,
        -60
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platform }}",
              "value2": "twitter"
            }
          ]
        }
      },
      "id": "is-twitter",
      "name": "Is Twitter?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        140,
        -180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platform }}",
              "value2": "facebook"
            }
          ]
        }
      },
      "id": "is-facebook",
      "name": "Is Facebook?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        140,
        -60
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platform }}",
              "value2": "linkedin"
            }
          ]
        }
      },
      "id": "is-linkedin",
      "name": "Is LinkedIn?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        140,
        60
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platform }}",
              "value2": "instagram"
            }
          ]
        }
      },
      "id": "is-instagram",
      "name": "Is Instagram?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        140,
        180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.platform }}",
              "value2": "reddit"
            }
          ]
        }
      },
      "id": "is-reddit",
      "name": "Is Reddit?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        140,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.twitter.com/2/tweets",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "post-to-twitter",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        360,
        -180
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.facebook.com/v18.0/me/feed",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "message",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "post-to-facebook",
      "name": "Post to Facebook",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        360,
        -60
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.linkedin.com/v2/ugcPosts",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "author",
              "value": "urn:li:person:me"
            },
            {
              "name": "lifecycleState",
              "value": "PUBLISHED"
            },
            {
              "name": "specificContent",
              "value": "{\n  \"com.linkedin.ugc.ShareContent\": {\n    \"shareCommentary\": {\n      \"text\": \"{{ $json.content }}\"\n    },\n    \"shareMediaCategory\": \"NONE\"\n  }\n}"
            }
          ]
        },
        "options": {}
      },
      "id": "post-to-linkedin",
      "name": "Post to LinkedIn",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        360,
        60
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.instagram.com/me/media",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "caption",
              "value": "={{ $json.content }}"
            },
            {
              "name": "image_url",
              "value": "={{ $json.image_url }}"
            }
          ]
        },
        "options": {}
      },
      "id": "post-to-instagram",
      "name": "Post to Instagram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        360,
        180
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://oauth.reddit.com/api/submit",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $json.access_token }}"
            },
            {
              "name": "User-Agent",
              "value": "SocialMediaScheduler/1.0"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "sr",
              "value": "test"
            },
            {
              "name": "kind",
              "value": "self"
            },
            {
              "name": "title",
              "value": "={{ $json.title || $json.content.substring(0, 100) }}"
            },
            {
              "name": "text",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "id": "post-to-reddit",
      "name": "Post to Reddit",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [
        360,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Handle API response and prepare for database update\nlet success = true;\nlet errorMessage = '';\n\n// Check if the API call was successful\nif (item.json.statusCode && item.json.statusCode >= 400) {\n  success = false;\n  errorMessage = `API Error ${item.json.statusCode}: ${JSON.stringify(item.json.body || {})}`;\n} else if (item.json.error) {\n  success = false;\n  errorMessage = `API Error: ${JSON.stringify(item.json.error)}`;\n}\n\n// Add status info to the item\nitem.json.post_success = success;\nitem.json.error_message = errorMessage;\n\nreturn item;"
      },
      "id": "handle-response",
      "name": "Handle Response",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        580,
        -60
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE scheduled_posts SET posted = true, posted_at = NOW(), updated_at = NOW() WHERE id = '{{$json[\"id\"]}}';",
        "additionalFields": {}
      },
      "id": "mark-as-published",
      "name": "Mark as Published",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        800,
        -60
      ],
      "credentials": {
        "postgres": {
          "id": "E7r1BJUUA005LCJY",
          "name": "Postgres account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE scheduled_posts SET updated_at = NOW() WHERE id = '{{$json[\"id\"]}}' AND '{{$json[\"post_success\"]}}' = 'false';",
        "additionalFields": {}
      },
      "id": "log-error",
      "name": "Log Error",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [
        800,
        60
      ],
      "credentials": {
        "postgres": {
          "id": "E7r1BJUUA005LCJY",
          "name": "Postgres account 2"
        }
      }
    }
  ],
  "connections": {
    "Every 5 Minutes": {
      "main": [
        [
          {
            "node": "Get Scheduled Posts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Scheduled Posts": {
      "main": [
        [
          {
            "node": "Get OAuth Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get OAuth Token": {
      "main": [
        [
          {
            "node": "Validate Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Token": {
      "main": [
        [
          {
            "node": "Is Twitter?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Facebook?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is LinkedIn?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Instagram?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Is Reddit?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Twitter?": {
      "main": [
        [
          {
            "node": "Post to Twitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Facebook?": {
      "main": [
        [
          {
            "node": "Post to Facebook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is LinkedIn?": {
      "main": [
        [
          {
            "node": "Post to LinkedIn",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Instagram?": {
      "main": [
        [
          {
            "node": "Post to Instagram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Reddit?": {
      "main": [
        [
          {
            "node": "Post to Reddit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Twitter": {
      "main": [
        [
          {
            "node": "Handle Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Facebook": {
      "main": [
        [
          {
            "node": "Handle Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to LinkedIn": {
      "main": [
        [
          {
            "node": "Handle Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Instagram": {
      "main": [
        [
          {
            "node": "Handle Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post to Reddit": {
      "main": [
        [
          {
            "node": "Handle Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Response": {
      "main": [
        [
          {
            "node": "Mark as Published",
            "type": "main",
            "index": 0
          },
          {
            "node": "Log Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true
  }
}
